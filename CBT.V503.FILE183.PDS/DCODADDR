//GILBERTD JOB (ACCT#),DCODADDR,
// NOTIFY=&SYSUID,
// CLASS=A,MSGCLASS=H,COND=(0,NE)
//HLASM EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)
***********************************************************************
*                                                                     *
* MODULE NAME = DCODADDR                                              *
*                                                                     *
* DESCRIPTIVE NAME = CONVERT ADDRESS TO MODULE.CSECT+X'OFFSET'        *
*                                                                     *
* FUNCTION = THIS MODULE CONVERTS AN ADDRESS PASSED BY ITS INVOKER    *
*            INTO A CHARACTER STRING THAT INDICATES WHAT MODULE,      *
*            CSECT WITHIN THE MODULE, AND OFFSET WITHIN THE CSECT     *
*            THE ADDRESS POINTS TO.  DCODADDR CAN BE INVOKED BY       *
*            RECOVERY ROUTINES OR ANY OTHER MODULES.                  *
*                                                                     *
* STATUS = R101                                                       *
*                                                                     *
* AUTHOR = GILBERT SAINT-FLOUR                                        *
*                                                                     *
* INVOCATION = VIA CALL OR LINK                                       *
*                                                                     *
*          LOAD EP=DCODADDR                                           *
*          LR   R15,R0                                                *
*          CALL (15),((RX),WORKAREA)                                  *
*     OR                                                              *
*          LINK EP=DCODADDR,PARAM=((RX),WORKAREA)                     *
*                                                                     *
*   RX CONTAINS THE ADDRESS THAT WILL BE CONVERTED                    *
*                                                                     *
*   WORKAREA DESIGNATES A 32-BYTE WORK AREA INTO WHICH DCODADDR       *
*   RETURNS THE RESULTING CHARACTER STRING.                           *
*                                                                     *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = MVS/ESA V4.3, DFSMS/MVS V1                        *
*                                                                     *
*    AUTHORIZATION = NONE                                             *
*                                                                     *
* MODULE TYPE = PROCEDURE, (SUB-ROUTINE)                              *
*                                                                     *
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      *
*                IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 4K                                                 *
*                                                                     *
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31,                   *
*                 PROBLEM STATE, TCB KEY                              *
*                                                                     *
* OPERATION = SEE DOCUMENTATION                                       *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*   @100 INITIAL VERSION                                              *
*   @101 ADD VERSION=1 TO IEWBUFF MACROS                              *
*                                                                     *
*   @101 (DCB,DDN=XXXXXX+002)                                         *
*        (ACB,DDN=YYYYYY)                                             *
*                                                                     *
***********************************************************************
&REL     SETC  '101'
DCODADDR CSECT
DCODADDR RMODE ANY
         B     BEGIN-DCODADDR(,R15)
         DC    C'DCODADDR - '
         DC    C'CONVERT ADDR TO MODULE.CSECT+X''OFFSET'' R&REL'
         DC    0F'0'
BEGIN    BAKR  R14,0
         LR    R11,R15
         USING DCODADDR,R11
*USING GSFSUBS,R12
         LM    R3,R4,0(R1)             REFADDR,WORKAREA
         LA    R3,0(,R3)               CLEAR HI-ORDER BIT
*
         GETMAIN RU,LV=DYNAML          GET DYNAMIC STORAGE
         LR    R13,R1
         USING DYNAM,R13
         LR    R14,R1                  CLEAR STORAGE
         LR    R15,R0                  CLEAR STORAGE
         SLR   R1,R1                   CLEAR STORAGE
         MVCL  R14,R0                  CLEAR STORAGE
*
         ST    R3,REFADDR              ADDRESS
         ST    R4,WORKADDR             ADDR OF WORK AREA
         STRING '*UNKNOWN*',INTO=WORK32
         MVI   MODNAME+1,8             LENGTH OF MODULE NAME
*
         CSVQUERY SEARCH=JPA,          SEARCH JPAQ                     +
               INADDR=REFADDR,         ADDRESS                         +
               OUTEPNM=MODNAME+2,      RETURN EP NAME                  +
               OUTLENGTH=MODLENGTH,    RETURN LENGTH                   +
               OUTLOADPT=MODLOADPT,    RETURN LOAD POINT ADDRESS       +
               OUTPDATA=PDATA,         PROVIDER DATA                   +
               OUTPID=PID,             PROVIDER ID                     +
               OUTEPTKN=MODTOKEN,      RETURN TOKEN                    +
               MF=(E,CSVQRYWK)         WORK AREA
         LTR   R15,R15                 CSVQUERY OK?
         BNZ   CSVQLPA                 NO, JUMP
         SL    R3,MODLOADPT            CALC OFFSET
         ST    R3,MODOFFSET            STORE OFFSET
         CLC   =C'PGMF',PID            LOADED FROM JOBLIB/STEPLIB?
         BNE   EXIT8                   NO, EXIT
         CLI   PDATA+1,X'01'           LOADED FROM -LNKLST- ?
         BE    EXIT8                   YES, PREVENT IEW2302S 1031
         BAL   R14,SCANLOAD         <- SCAN LOAD-MODULE
         LTR   R15,R15                 IEWBIND OK?
         BNZ   EXIT8                   NO, USE MODNAME
         B     EXIT9                   EXIT
*---------------------------------------------------------------------*
*                                                                     *
*        LOOK FOR AN LPA MODULE                                       *
*                                                                     *
*---------------------------------------------------------------------*
CSVQLPA  CSVQUERY SEARCH=LPA,          SEARCH ALPAQ/PLPAQ              +
               INADDR=REFADDR,         ADDRESS                         +
               OUTEPNM=MODNAME+2,      RETURN EP NAME                  +
               OUTLOADPT=MODLOADPT,    RETURN LOAD POINT ADDRESS       +
               MF=(E,CSVQRYWK)         WORK AREA
         LTR   R15,R15                 CSVQUERY OK?
         BZ    EXIT7                   YES, EXIT
*---------------------------------------------------------------------*
*                                                                     *
*        RETRIEVE NUCLEUS MODULE NAME AND OFFSET                      *
*                                                                     *
*---------------------------------------------------------------------*
NUCLKUP  NUCLKUP BYADDR,ADDR=(R3),NAME=MODNAME+2
         LTR   R15,R15                 NUCLKUP OK?
         BNZ   VSMLOC                  NO, FIND SUB-POOL
         ST    R0,MODLOADPT            STORE LOAD POINT ADDRESS
*
EXIT7    SL    R3,MODLOADPT            CALC OFFSET
         ST    R3,MODOFFSET            STORE OFFSET
*
EXIT8    STRING (MODNAME+2,8,T),                                       X
               '+X''',(MODOFFSET+1,3,X),'''',INTO=WORK32
         CLI   MODOFFSET+1,0           OFFSET > X'00FFFF' ?
         BNE   EXIT9                   YES, EXIT
         STRING (MODNAME+2,8,T),                                       X
               '+X''',(MODOFFSET+2,2,X),'''',INTO=WORK32
         B     EXIT9
***********************************************************************
*                                                                     *
*        RETRIEVE SUB-POOL ID                                         *
*                                                                     *
***********************************************************************
VSMLOC   L     R3,REFADDR              GET REFERENCE ADDRESS
         LA    R5,=C'PVT '
         VSMLOC PVT,AREA=((R3),1)
         LTR   R15,R15                 STORAGE ALLOCATED?
         BE    VSMLOC8                 YES, JUMP
         LA    R5,=C'LSQA'
         VSMLOC LSQA,AREA=((R3),1)
         LTR   R15,R15                 STORAGE ALLOCATED?
         BE    VSMLOC8                 YES, JUMP
         LA    R5,=C'CSA '
         VSMLOC CSA,AREA=((R3),1)
         LTR   R15,R15                 STORAGE ALLOCATED?
         BE    VSMLOC8                 YES, JUMP
         LA    R5,=C'SQA '
         VSMLOC SQA,AREA=((R3),1)
         LTR   R15,R15                 STORAGE ALLOCATED?
         BNZ   EXIT9                   NO, EXIT
VSMLOC8  LA    R1,255                  MASK NOR NR
         NR    R1,R0                   R1 CONTAINS SUBPOOL ID
         STRING ((R5),4,T),' SUBPOOL ',((R1),,R3Z),INTO=WORK32
*
EXIT9    L     R4,WORKADDR             CALLER'S 32-BYTE WORK AREA
         MVC   0(L'WORK32,R4),WORK32   MVC RESULT TO CALLER'S WORK AREA
         FREEMAIN RU,LV=DYNAML,A=(R13)
         PR                            GOBACK TO CALLER
***********************************************************************
*                                                                     *
*        RETRIEVE CSECT FROM JPAQ MODULE                              *
*                                                                     *
***********************************************************************
SCANLOAD BAKR  R14,0
         IEWBIND FUNC=STARTD,          START DIALOG                    X
               DIALOG=DTOKEN,                                          X
               RETCODE=RETCODE,                                        X
               RSNCODE=RSNCODE,                                        X
               MF=(E,BINDPARM)
         LTR   R15,R15
         BNZ   SCANL420
 DELETE EP=IEWBIND
*
         IEWBIND FUNC=CREATEW,         CREATE WORKMOD                  X
               WORKMOD=WTOKEN,                                         X
               DIALOG=DTOKEN,                                          X
               INTENT=ACCESS,                                          X
               RETCODE=RETCODE,                                        X
               RSNCODE=RSNCODE,                                        X
               MF=(E,BINDPARM)
         LTR   R15,R15
         BNZ   SCANL420
*
         CLI   PDATA+1,X'02'           LOADED WITH DE PARM?
         BE    SCANL04                 YES, PREVENT IEW2302S 1031
         IEWBIND FUNC=INCLUDE,         INCLUDE LOAD-MODULE             X
               WORKMOD=WTOKEN,                                         X
               INTYPE=TOKEN,                                           X
               EPTOKEN=MODTOKEN,                                       X
               RETCODE=RETCODE,                                        X
               RSNCODE=RSNCODE,                                        X
               MF=(E,BINDPARM)
         B     SCANL05
*
SCANL04  MVI   DDNAME+1,8              DDNAME LENGTH
         MVC   DDNAME+2(8),PDATA+8     MOVE DDNAME
         IEWBIND FUNC=INCLUDE,         INCLUDE LOAD-MODULE             X
               WORKMOD=WTOKEN,                                         X
               INTYPE=NAME,                                            X
               DDNAME=DDNAME,                                          X
               MEMBER=MODNAME,                                         X
               RETCODE=RETCODE,                                        X
               RSNCODE=RSNCODE,                                        X
               MF=(E,BINDPARM)
*
SCANL05  EQU   *
         LTR   R15,R15
         BNZ   SCANL420
*
         IEWBUFF FUNC=GETBUF,TYPE=NAME
         IEWBUFF FUNC=INITBUF,TYPE=NAME
*
***      IEWBIND FUNC=GETN,            GET NAMES                       X
               WORKMOD=WTOKEN,                                         X
               AREA=IEWBBNL,           ?                               X
               CURSOR=CURSORN,         CURSOR                          X
               COUNT=COUNTN,           CURRENT NUMBER OF NAMES         X
               TCOUNT=TCOUNT,          TOTAL NAME COUNT                X
               NTYPE=SECTION,          RETURN SECTION NAMES            X
               RETCODE=RETCODE,                                        X
               RSNCODE=RSNCODE,                                        X
               MF=(E,BINDPARM)
         IEWBIND FUNC=GETE,            GET ESD                         X
               WORKMOD=WTOKEN,                                         X
               OFFSET=MODOFFSET,       OFFSET                          X
               RECTYPE=$SD,            (SD)                            X
               AREA=IEWBBNL,           ?                               X
               CURSOR=CURSORN,         CURSOR                          X
               COUNT=COUNTN,           CURRENT NUMBER OF NAMES         X
               RETCODE=RETCODE,                                        X
               RSNCODE=RSNCODE,                                        X
               MF=(E,BINDPARM)
         CH    R15,=H'4'
         BH    SCANL420
*
         IEWBUFF FUNC=GETBUF,TYPE=ESD
         IEWBUFF FUNC=INITBUF,TYPE=ESD
         L     R5,COUNTN               CURRENT NUMBER OF NAMES
*LOOP
SCANL11  DS    0H
         IEWBIND FUNC=GETD,            GET ESD                         X
               WORKMOD=WTOKEN,                                         X
               CLASS=@ESD,                                             X
               AREA=IEWBESD,                                           X
               CURSOR=CURSORD,         .                               X
               COUNT=COUNTD,                                           X
               RETCODE=RETCODE,                                        X
               RSNCODE=RSNCODE,                                        X
               MF=(E,BINDPARM)
         CH    R15,=H'4'
         BH    SCANL11N
         ICM   R4,B'1111',COUNTD       ANY ESD?
         BZ    SCANL11N                NO, IGNORE THIS NAME
         LA    R7,ESDH_END             FIRST RECORD IN ESD BUFFER
*--LOOP
SCANL12  CLC   ESD_TYPE,=C'SD'         CSECT?
         BNE   SCANL12N                NO, IGNORE
         L     R0,ESD_MODULE_OFFSET    GET OFFSET OF THIS CSECT
*L R1,ESD_NAME_PTR
*LH R14,ESD_NAME_CHARS
         CL    R0,MODOFFSET            REF ADDR IN THIS CSECT?
         BH    SCANL12N                NO, IGNORE
         AL    R0,ESD_LENG             ADD CSECT LENGTH
         CL    R0,MODOFFSET            REF ADDR IN THIS CSECT?
         BNH   SCANL12N                NO, IGNORE
         L     R0,MODOFFSET            GET REF OFFSET
         SL    R0,ESD_MODULE_OFFSET    GET OFFSET IN THIS CSECT
         ST    R0,DWD                  SAVE FOR $PRINT
         L     R1,ESD_NAME_PTR         ADDRESS OF CSECT NAME
         CLI   0(R1),0                 UNNAMED CSECT?
         BE    SCANL12N                YES, IGNORE
         LH    R0,ESD_NAME_CHARS       LENGTH OF CSECT NAME
*EX 0,*
         STRING (MODNAME+2,8,T),'.',((R1),(R0)),                       X
               '+X''',(DWD+1,3,X),'''',INTO=WORK32
         CLI   DWD+1,0                 OFFSET > X'00FFFF' ?
         BNE   SCANL400                YES, EXIT
         STRING (MODNAME+2,8,T),'.',((R1),(R0)),                       X
               '+X''',(DWD+2,2,X),'''',INTO=WORK32
         B     SCANL400
SCANL12N A     R7,ESDH_ENTRY_LENG      LENGTH OF AN ESD ENTRY
         BCT   R4,SCANL12
*--ENDLOOP
SCANL11N A     R9,BNLH_ENTRY_LENG      LENGTH OF A BNL ENTRY
         BCT   R5,SCANL11
*ENDLOOP
SCANL400 IEWBUFF FUNC=FREEBUF,TYPE=ESD
SCANL410 IEWBUFF FUNC=FREEBUF,TYPE=NAME
*
SCANL420 BAL   R14,SETMAXCC            SAVE RETCODE
         IEWBIND FUNC=DELETEW,         DELETE WORKMOD                  X
               WORKMOD=WTOKEN,                                         X
               PROTECT=YES,                                            X
               RETCODE=RETCODE,                                        X
               RSNCODE=RSNCODE,                                        X
               MF=(E,BINDPARM)
*
         IEWBIND FUNC=ENDD,            END DIALOG                      X
               DIALOG=DTOKEN,                                          X
               RETCODE=RETCODE,                                        X
               RSNCODE=RSNCODE,                                        X
               MF=(E,BINDPARM)
         LH    R15,MAXCC               SAVED RETCODE
         PR
*
SETMAXCC CH    R15,MAXCC
         BNHR  R14
         STH   R15,MAXCC
         BR    R14
*
@ESD     DC    H'4',C'@ESD'
$SD      DC    H'4',C'(SD)'
         IEWBUFF FUNC=MAPBUF,                                          X
               VERSION=1,              VERSION 1 MAPPING               X
               TYPE=ESD,                                               X
               SIZE=4096,              # OF ENTRIES                    X
               HEADREG=6,              R6                              X
               ENTRYREG=7              R7
         IEWBUFF FUNC=MAPBUF,                                          X
               VERSION=1,              VERSION 1 MAPPING               X
               TYPE=NAME,                                              X
               SIZE=4096,              # OF ENTRIES                    X
               HEADREG=8,              R8                              X
               ENTRYREG=9              R9
         DS    0A(R6,R7,R8,R9)         THESE REGS USED HERE
DYNAM    DSECT
         DS    18F
DWD      DS    D
WORKADDR DS    F
         IEWBIND MF=(L,BINDPARM)
DTOKEN   DS    D                       DIALOG TOKEN
WTOKEN   DS    D                       WORKMOD TOKEN
RETCODE  DS    F
RSNCODE  DS    F
COUNTN   DS    F                       # OF NAMES
CURSORN  DS    F                       CURRENT NAME
COUNTD   DS    F                       # OF ESD
CURSORD  DS    F                       CURRENT ESD
TCOUNT   DS    F
MODNAME  DS    H'8',CL8'IEBGENER'
DDNAME   DS    H'8',CL8'STEPLIB '
MAXCC    DS    H                       MAXCC
REFADDR  DS    A
MODLENGTH DS   F
MODLOADPT DS   A
MODOFFSET DS   F
PDATA     DS   XL16
PID       DS   XL4
MODTOKEN  DS   XL8
WORK32    DS   CL32
         CSVQUERY MF=(L,CSVQRYWK),PLISTVER=2
DYNAML   EQU   *-DYNAM
         YREGS
         STRING GENERATE
         CVT   DSECT=YES,LIST=NO
         END
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
// DD DSN=CBTTAPE.FILE183.PDS,DISP=SHR                STRING
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),BLKSIZE=3200
//*
//LKED    EXEC PGM=HEWLKED,PARM=RENT
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=*.HLASM.SYSLIN,DISP=(OLD,DELETE)
//SYSLMOD  DD DSN=CBTTAPE.FILE183.LOAD(DCODADDR),DISP=SHR
//*
//HLASM2 EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)
        $ENTER
*
         LA    R3,GSFSUBS              %GSFSUBS
        $CALL  DCODADDR,((R3),WORK32)
        $PRINT ((R3),,X),1X,WORK32
*
         L     R3,=X'04128548'         CSA
        $CALL  DCODADDR,((R3),WORK32)
        $PRINT ((R3),,X),1X,WORK32
*
         LR    R3,R13                  SP 000
        $CALL  DCODADDR,((R3),WORK32)
        $PRINT ((R3),,X),1X,WORK32
*
         BALR  R3,0
        $CALL  DCODADDR,((R3),WORK32)
        $PRINT ((R3),,X),1X,WORK32
*
         LOAD  EP=GSFSUBS
         LR    R3,R0
         AH    R3,=H'5000'             REFERENCE ADDRESS
        $CALL  DCODADDR,((R3),WORK32)
        $PRINT ((R3),,X),1X,WORK32
*
         LOAD  EP=IDA019L1
         LR    R3,R0
         AH    R3,=H'9000'             REFERENCE ADDRESS
        $CALL  DCODADDR,((R3),WORK32)
        $PRINT ((R3),,X),1X,WORK32
*
**       L     R1,16
**       L     R1,8(,R1)
**       LOAD  EP=TSPEMAN,DCB=(R1)
**       LR    R3,R0
**       AH    R3,=H'1000'             REFERENCE ADDRESS
**      $CALL  DCODADDR,((R3),WORK32)
**      $PRINT ((R3),,X),1X,WORK32
**
         MVI   BLDLLIST+1,1
         MVI   BLDLLIST+3,74
         MVC   BLDLLIST+4(8),=C'SHOWMVS '
         BLDL  0,BLDLLIST
         LOAD  DE=BLDLLIST+4
         LR    R3,R0
         AH    R3,=H'1000'             REFERENCE ADDRESS
        $CALL  DCODADDR,((R3),WORK32)
        $PRINT ((R3),,X),1X,WORK32
*
         L     R3,16                   CVTPTR
        $CALL  DCODADDR,((R3),WORK32)
        $PRINT ((R3),,X),1X,WORK32
*
        $EXIT
        $SUBS
WORK32   DS    CL32
BLDLLIST DS    Y(1,74),74X
         END
//SYSLIB   DD DSN=GSFSOFT.GSF-ENV.MACLIB,DISP=SHR             $ENTER
//         DD DSN=SYS1.MACLIB,DISP=SHR                        BLDL
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),BLKSIZE=3200
//*
//GO      EXEC PGM=LOADER,PARM=NOPRINT
//STEPLIB  DD DSN=CBTTAPE.FILE183.LOAD,DISP=SHR
// DD DSN=SYS1.LINKLIB,DISP=SHR
//SYSLIN   DD DSN=*.HLASM2.SYSLIN,DISP=(OLD,DELETE)
//SYSPRINT DD SYSOUT=*
//SYSDEBUG DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*
