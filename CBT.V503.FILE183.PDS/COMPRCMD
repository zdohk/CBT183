//GILBERTK JOB (ACCT#),COMPRESS,
//*RESTART=GO,
// NOTIFY=&SYSUID,
// CLASS=A,MSGCLASS=H,COND=(0,NE)
//HLASM EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)
***********************************************************************
*                                                                     *
* MODULE NAME = COMPRESS                                              *
*                                                                     *
* DESCRIPTIVE NAME = COMPRESS a PDS with DISP=SHR                     *
*                                                                     *
* STATUS = R323                                                       *
*                                                                     *
* FUNCTION = This TSO/E command allows you to compress a partitionned *
*            data set with DISP=SHR using a protection scheme         *
*            compatible with ISPF and the linkage-editor.             *
*            It also allows you to compress several data sets with a  *
*            single command by specifying a generic data set name     *
*            such as 'SYS2.*'.  Together with the command itself,     *
*            there is an edit macro particularly handy when abend     *
*            SD37 strikes the PDS you're editing.                     *
*                                                                     *
* AUTHOR = Gilbert Saint-Flour <carlos@gsf-soft.com>                  *
*          http://gsf-soft.com/Freeware/                              *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = MVS/ESA 4.3                                       *
*                   DFSMS/MVS                                         *
*                   TSO/E 1.3                                         *
*                   STRING macro R400                                 *
*                                                                     *
*    AUTHORIZATION = NONE                                             *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
* MODULE TYPE = PROCEDURE, (TSO Command Processor)                    *
*                                                                     *
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      *
*                IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 4K                                                 *
*                                                                     *
*    ATTRIBUTES = REENTERABLE, RMODE 24, AMODE 31,                    *
*                 PROBLEM STATE, KEY 8                                *
*                                                                     *
* SYNTAX = See Below                                                  *
*                                                                     *
*            COMPRESS 'data-set-name'                                 *
*                      VOLUME('volser')                               *
*                      CHECK/NOCHECK                                  *
*                      SHR/OLD/LLAREFRESH                             *
*                      CHANGED/NOCHANGED                              *
*                      SETMSG                                         *
*                                                                     *
*            'data-set-name' is the dsname of the data set or         *
*            a generic dsname like 'ISP.V2R3M0.*'.                    *
*            If you specify a generic name, "COMPRESS" retrieves      *
*            the full data sets names from the catalog.               *
*            If the dsname is not enclosed in apostrophes,            *
*            it is prefixed with your userid.                         *
*            A list of data set names enclosed in parentheses         *
*            can also be specified.                                   *
*                                                                     *
*            'volser' is the volume serial number of the data set     *
*            when the data set is not cataloged or is cataloged on    *
*            another volume.                                          *
*                                                                     *
*            'OLD' specifies that the data-set(s) should be allo-     *
*            cated with DISP=OLD instead of SHR, which is the         *
*            default.  During a generic compress, 'OLD' allows you    *
*            to make sure that the data sets currently allocated      *
*            by other jobs are not compressed.                        *
*                                                                     *
*            'LLAREFRESH' instructs COMPRESS to issue LLACOPY for     *
*            each member in the compressed PDS to refresh LLA         *
*            directory pointers. To satisfy LLACOPY authorisation     *
*            requirements, COMPRESS must be specified in the          *
*            AUTHTSF section of the IKJTSOxx member.                  *
*                                                                     *
*            CHECK/NOCHECK are key-words that only apply to           *
*            MVS systems with ASM2 installed.                         *
*            'CHECK' is the default and indicates that during a       *
*            generic compress operation, a data set should not        *
*            be compressed if its asm2id (ds1syscd+8 in the           *
*            f1-dscb) is identical to the job name; in other          *
*            words, if the PDS hasn't been updated since the last     *
*            time your job processed it, there's no need to           *
*            compress it again.                                       *
*            'NOCHECK' indicates that the PDS should be               *
*            compressed regardless of what ASM2ID contains.           *
*                                                                     *
*            'CHANGED' indicates that during a generic compress       *
*            operation, a data set should not be compressed if its    *
*            DS1DSCHA bit is off, in other words, if the PDS          *
*            hasn't been updated since the last time it's been        *
*            backed up.  This is the default.                         *
*            'NOCHANGED' indicates that the PDS should be             *
*            compressed regardless of the setting of the changed bit. *
*                                                                     *
*            'SETMSG' is an option used by the COMPRESS edit macro.   *
*                                                                     *
* OPERATION = See Below                                               *
*                                                                     *
*           1. The "COMPRESS" command requires no APF authorization   *
*              and can be executed out of any load library.           *
*              "COMPRESS" uses the TSO/E service routine (IKJEFTSR)   *
*              to create the authorized environment required to       *
*              execute IEBCOPY.  The default IKJEFTAP table           *
*              is set up for this purpose (and so is the IKJTSOxx     *
*              parmlib member if your system supports it).            *
*                                                                     *
*           2. The protection scheme used by "COMPRESS" is            *
*              similar to the one implemented by ISPF/PDF V2 and      *
*              protects against simultaneous updates by ISPF and      *
*              the linkage editor.  However, when you compress a      *
*              PDS with DISP=SHR you don't have any read              *
*              integrity.  This is particularly critical for          *
*              load libraries and compressing one while it is         *
*              used may cause S106 abends.                            *
*                                                                     *
*           3. If you specify a volser together with a generic        *
*              data set name, "COMPRESS" looks in the catalog for     *
*              the full data set names, skipping the data sets that   *
*              are cataloged on other disk packs.  "COMPRESS"         *
*              does not read the VTOC: if uncataloged data sets that  *
*              satisfy the generic name requirement exist on the      *
*              pack, they are not processed.                          *
*                                                                     *
*           4. If you intend to use the "COMPRESS" edit macro,        *
*              copy it to a clist library such as IPO1.CMDPROC        *
*              or ISR.V2R3M0.ISRCLIB.  That's all you need to be      *
*              able to invoke it as an edit primary commands like     *
*              'CANCEL' or 'RESET'.                                   *
*              At any moment while you're editing a member, you       *
*              may enter 'COMPRESS' to compress the PDS.  When        *
*              it is compressed, the edit macro returns an ISPF       *
*              message that indicates how full the PDS now is.        *
*                                                                     *
*           5. The TSO/E service routine creates a parallel TMP       *
*              to invoke IEBCOPY.                                     *
*              This is what the TCB structure looks like while        *
*              IEBCOPY is executing:                                  *
*                                                                     *
*                IKJEFT01           TMP INIT (JSTCB)                  *
*                  IKJEFT02         TMP MAINLINE                      *
*                    IKJEFT09       TMP SECOND LEVEL                  *
*                      COMPRESS     COMMAND PROCESSOR                 *
*                  IKJEFT02         TMP MAINLINE (PARALLEL TMP)       *
*                    IKJEFT09       TMP SECOND LEVEL (PARALLEL TMP)   *
*                      IEBCOPY      IEBCOPY                           *
*                                                                     *
*           6. The STTMPMD (set TMP mode) macro is used to disable    *
*              the attention and PA1 keys.  This prevents users       *
*              from destroying their PDS which can so easily happen   *
*              when they use ISPF compress services.                  *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*260 MODIFIED FOR TSO/E VERSION 2 (AMODE=31)                     1992 *
*261 SHR/OLD, Statistics                                              *
*262 Ignore migrated data sets                                        *
*263 STOP Command                                                     *
*264 CHANGED/NOCHANGED                                                *
*266 Check for PDSEs and do not compress them                    1993 *
*267 Refresh display if invoked from PDF 3.4 panel - ZDLREF           *
*310 Change numbering scheme                                     1994 *
*311 Goback with non-zero return-code after PARSE failure        1995 *
*    Small changes to the REXX EXEC for ISPF 4.1                      *
*312 Add SPACE=(TRK,10) to SYSIN/SYSPRINT allocation and              *
*    invoke DAIRFAIL if it fails.                                     *
*313 Add SETMSG option which sets ZMSG000S and ZMSG000L and issues    *
*    SETMSG(ISPZ000) instead of the normal completion message;        *
*    the COMPRESS EDIT macro no longer needs to use OUTTRAP.          *
*314 Replace IKJTSMSG macros with STRING; issue statistics in long    *
*    message when SETMSG option is used.                              *
*315 Move STTMPMD macros around IEBCOPY invocation to make sure  1996 *
*    that STTMPMD OFF is executed.                                    *
*316 Retrieve volser from ZDLVOL when invoked from PDF 3.4       1998 *
*    Minor technical changes                                          *
*317 Copy DYNALLOC Return Code to MAXCC                          2003 *
*    Replace PUT24 with GET/PUT                                       *
*318 Force RECFM=FB,LRECL=80 in SYSIN DCB (PDSMAN/PM74127).           *
*    Add VOLSER to MSG28                                         2004 *
*319 Data Set List                                               2005 *
*320 Re-read F1-DSCB in case ENQ had to wait                     2006 *
*321 LLAREFRESH                                                       *
*322 Add vol(volser) to final message when VOL was supplied      2009 *
*323 Convert PARM to CPPL when invoked as a program              2010 *
&REL     SETC  'R323'                                                 *
***********************************************************************
&DATE    SETC  '&SYSDATE'(7,2)'-'.'&SYSDATE'(1,2)'-'.'&SYSDATE'(4,2)
COMPRESS CSECT
COMPRESS AMODE 31
         SAVE (14,12),,'GSF Utilities - COMPRESS &REL 20&DATE &SYSTIME'
         LR    R12,R15                 BASE REGISTER
         USING COMPRESS,R12
***********************************************************************
*        ALLOCATE DYNAMIC STORAGE AREA                                *
***********************************************************************
         LA    R0,DYNAML               SIZE OF DYNAMIC AREA
         GETMAIN R,LV=(0)              ACQUIRE DYNAMIC STORAGE
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LM    R13,R1,8(R13)           load R13, reload R1
         USING DYNAM,R13
         LR    R11,R1                  A(CPPL)
         USING CPPL,R11
         LA    R14,DYNAM+72            CLEAR DYNAMIC STORAGE AREA
         LA    R15,DYNAML-72           CLEAR DYNAMIC STORAGE AREA
         SLR   R3,R3                   CLEAR DYNAMIC STORAGE AREA
         MVCL  R14,R2                  CLEAR DYNAMIC STORAGE AREA
***********************************************************************
*        Check for re-entry via AUTHTSF(COMPRESS)                     *
***********************************************************************
CHKAUTH  EQU   *
         L     R2,540(,0)              PSATOLD (own TCB)
         L     R2,0(,R2)               TCBRBP (own PRB)
         ICM   R2,B'0111',RBCDE1-RBBASIC(R2) (own CDE)
         MVC   OWNNAME,CDNAME-CDENTRY(R2) own name
*
         MVI   DYNENQL,X'80'           EOL
         ENQ  (OWNNAME,OWNNAME,E,L'OWNNAME,STEP),MF=(E,DYNENQL),RET=USE
         LTR   R15,R15                 first time?
         BNZ   LLACOPY                 no, must be auth call from TSR
         EXTRACT ADDRTIOT,FIELDS=TIOT,MF=(E,EXTRACTL)
         EXTRACT ADDRCOMM,FIELDS=COMM,MF=(E,EXTRACTL)
***********************************************************************
*        Convert PARM to CPPL when invoked as a program               *
***********************************************************************
         TM    CPPL+0,X'80'            CPPL or PARM ?
         BZ    BLDCPPLX                CPPL, jump
BLDCPPL  EQU   *
         L     R1,CPPL+0               A(PARM)
         LH    R2,0(,R1)               R2: length of PARM field
         STRING X'0100,0009',OWNNAME,1X,(2(R1),(R2)),                  X
               INTO=PGM_CBUF
         STH   R15,PGM_CBUF+0          4+length
         LA    R11,DYN_CPPL            point at CPPL
         LA    R1,PGM_CBUF             command buffer
         ST    R1,CPPLCBUF             command buffer
         L     R1,X'0224'(0,0)         PSAAOLD   A(ASCB)
         L     R1,X'006C'(,R1)         ASCBASXB  A(ASXB)
         L     R1,X'0014'(,R1)         ASXBLWA   A(LWA)
         L     R2,X'0020'(,R1)         LWAPECT   A(ECT)
         ST    R2,CPPLECT              Store ECT address
         L     R1,X'0018'(,R1)         LWAPSCB   A(PSCB)
         ST    R1,CPPLPSCB             A(PSCB)
         MVC   CPPLUPT,X'0034'(R1)     PSCBUPT   A(UPT)
BLDCPPLX EQU   *
***********************************************************************
*        BUILD PARAMETER LIST FOR IKJEFF02                            *
***********************************************************************
         ST    R11,MTCPPLP             STORE CPPL ADDRESS IN MTPL
         LA    R0,MTCSECTP             MESSAGE SECTION
         ST    R0,MTPLPTR              STORE ADDR IN MTPL
         LA    R0,DYNECB               EVENT CONTROL BLOCK
         ST    R0,MTECBP               STORE ECB IN MTPL
         L     R0,=A(MSGCSECT)         MESSAGE CSECT
         ST    R0,MTCSECTP             STORE ECT IN PPL
         OI    MTSW1,MTPUTLSW          PUTLINE IS NEEDED
         OI    MTSW2,MTFMT             31-BIT PARM LIST
         USING PPL,DYNPPL              SET UP ADDRESSABILITY TO PPL
***********************************************************************
*        BUILD PARSE PARM LIST, CALL IKJPARS                          *
***********************************************************************
PARSE000 EQU   *
         L     R0,CPPLUPT              USER PROFILE TABLE
         ST    R0,PPLUPT               STORE UPT ADDRESS IN PPL
         L     R0,CPPLECT              ENVIRONMENT CONTROL TABLE
         ST    R0,PPLECT               STORE ECT IN PPL
         LA    R0,DYNECB               EVENT CONTROL BLOCK
         ST    R0,PPLECB               STORE ECB IN PPL
         MVC   PPLPCL,=A(PCLCSECT)     STORE PCL ADDR INTO PPL
         LA    R0,DYNANSWR             ANSWER AREA
         ST    R0,PPLANS               STORE ANSWER ADDRESS IN PPL
         L     R0,CPPLCBUF             COMMAND BUFFER
         ST    R0,PPLCBUF              STORE BUFFER ADDRESS IN PPL
         L     R15,CVTPTR(,0)          ADDR OF CVT
         L     R15,CVTPARS-CVTMAP(,R15) ADDR OF IKJPARS
         LA    R1,PPL                  ADDR OF PPL
         SYNCH (R15)                <- CALL THE TSO PARSE ROUTINE
         ST    R15,MAXCC               SAVE RETURN CODE
         LTR   R15,R15                 CHECK FOR ZERO PARSE RETURN
         BNZ   FINISH                  GO AWAY UPSET
***********************************************************************
*        PROCESS PARSED PARAMETERS                                    *
***********************************************************************
         L     R7,DYNANSWR             LOAD PDL ADDRESS
         USING IKJPARMD,R7             SET UP ADDRESSABILITY TO PDL
PARSE200 MVI   CHECK,C'C'              DEFAULT IS 'CHECK'
         CLI   CHKPCE+1,2              CHECK FOR 2ND IKJPNAME
         BNE   PARSE220                JUMP IF NOT THE 2ND
         MVI   CHECK,C'N'              2ND IS 'NOCHECK'
PARSE220 MVI   CHANGED,C'C'            DEFAULT IS 'CHANGED'
         CLI   CHNGPCE+1,2             CHECK FOR 2ND IKJPNAME
         BNE   PARSE230                JUMP IF NOT THE 2ND
         MVI   CHANGED,C'N'            2ND IS 'NOCHANGED'
PARSE230 CLI   SETMPCE+1,1             SETMSG option specified?
         BNE   PARSE300                no, jump
         MVI   SETMSG,C'Y'             yes, remember it
*
PARSE300 LA    R0,=AL2(DALSTATS,1,1,X'0800') DISP=SHR KEY
         CLI   STATPCE+1,2             CHECK FOR 2ND IKJPNAME
         BNE   PARSE310                JUMP IF NOT THE 2ND
         LA    R0,=AL2(DALSTATS,1,1,X'0100') DISP=OLD KEY
PARSE310 ST    R0,STATUS               STORE ADDRESS OF STATUS FIELD
*
PARSE500 TM    VOLPCE2+6,X'80'         CHECK VOLSER SUBPARAMETER
         BZ    PARSE599                JUMP IF NO SUBPARAM SPECIFIED
         L     R1,VOLPCE2+00           GET SUBPARAM ADDRESS
         MVC   VOLSER,0(R1)            MOVE 6-BYTE VOLUME SERIAL
         MVI   VOLGIVEN,C'Y'           SHOW VOL HAS BEEN GIVEN L
PARSE599 EQU   *
         LA    R7,DSNPCE               FIRST DSNAME
         USING PCE7,R7
***********************************************************************
*                                                                     *
*        PROCESS DATA SET LIST                                        *
*                                                                     *
***********************************************************************
*LOOP
GETDSN   EQU   *
         L     R0,PCE7ADDR             GET ADDRESS OF DSNAME
         LH    R1,PCE7LEN              ACTUAL LENGTH OF DSNAME
         STRING ((R0),(R1)),INTO=DSNAME COPY DSNAME INTO 44-CHAR FLD
         MVI   MODE,C'S'               DEFAULT IS MODE=SINGLE
*
*        EXTRACT DATA SET NAMES FROM CATALOG
*
         LA    R15,DSNAME-1(R1)        point R15 at last character
         CLI   0(R15),C'*'             generic dsname?
         BNE   PROCESS2                NO, USE MODE=SINGLE
         BCTR  R1,0                    length(dsname)-1 for LISTCAT
         STC   R1,WK265                STORE LENGTH
         MVC   WK265+1(44),DSNAME      MOVE PARTIAL NAME
         LA    R0,WK265                ENTRY NAME
         ST    R0,CTGENT               ENTRY ADDRESS
         MVI   CTGOPTN1,CTGNAME        CTGENT POINTS TO ENTRY NAME
         OI    CTGOPTN1,CTGGENLD       GENERIC LOCATE REQUEST
         MVI   CTGOPTN3,CTGAM0         OS/VS2 CATALOG MGMT REQUEST
         OI    CTGOPTN3,CTGSUPLT       SUPER LOCATE REQUEST
         MVI   CTGTYPE,CTGTALIN        ENTRY TYPE IS NONVSAM
         OI    CTGOPTNS,CTGF2WKA       FORMAT-2 WORK AREA
         ICM   R1,B'1111',CTGWKA       FIRST TIME?
         BNZ   GETWKA2                 NO, SKIP GETMAIN
         GETMAIN RC,LV=45*10000        WORK AREA FOR GENERIC LOCATE
         LTR   R15,R15                 CHECK COMPLETION
         BNZ   MSGGETM                 GETMAIN FAILED, EXIT
         ST    R1,CTGWKA               STORE ADDRESS INTO CTGPL
         ST    R0,0(,R1)               FORMAT WORK AREA HEADER
GETWKA2  EQU   *
         XC    4(4,R1),4(R1)           FORMAT WORK AREA HEADER
         LOCATE CTGPL                  REQUEST CATALOG MGMT SERVICES
         LTR   R15,R15                 CHECK COMPLETION
         BNZ   NEXTDSN                 GENERIC LOCATE FAILED, IGNORE
         MVI   MODE,C'C'               MODE IS "CATALOG"
         L     R8,CTGWKA               SVC 26 WORK AREA ADDRESS
         LM    R0,R1,0(R8)             SVC 26 WORK AREA HEADER
         LA    R1,7(,R1)               USED LENGTH
         SRL   R1,3                     ROUNDED UP
         SLL   R1,3                      TO A MULTIPLE OF 8
         SR    R0,R1                   COMPUTE UNUSED LENGTH
         LA    R1,0(R1,R8)             ADDRESS OF UNUSED PORTION
         FREEMAIN RU,LV=(0),A=(1)      FREE UNUSED PORTION
         LNR   R0,R0                   GET NEGATIVE LENGTH
         A     R0,0(,R8)               ADD INITIAL LENGTH
         ST    R0,0(,R8)               STORE CURRENT LENGTH
         LA    R8,8(,R8)               FIRST DATA SET NAME
***********************************************************************
*        OBTAIN VOLUME AND DSCB INFORMATION                           *
***********************************************************************
*--LOOP
PROCESS  CLI   0(R8),C'A'              NVSAM ENTRY?
         BNE   NEXTDSN4                NO, SKIP IT
         MVC   DSNAME,1(R8)            MOVE DATA SET NAME
PROCESS2 MVI   PRINTMSG,C'N'           RESET INDICATOR
         L     R0,=A(1000000)          ONE MEG
         GETMAIN RC,LV=(0),LOC=(BELOW,ANY) GET ONE MEG FOR IEBCOPY
         LTR   R15,R15                 CHECK COMPLETION
         BNZ   MSGGETM                 GETMAIN FAILED, EXIT
         FREEMAIN RU,LV=(0),A=(1)      FREE ONE MEG FOR IEBCOPY
         CLI   VOLGIVEN,C'Y'           CHECK IF VOLSER WAS SUPPLIED
         BE    OBTAIN00                JUMP IF IT WAS
***********************************************************************
*        retrieve DSLIST volser                                       *
***********************************************************************
         ICM   R15,B'1111',=A(ISPQRY)  ISPQRY AVAILABLE?
         BZ    ZDLVOL9                 NO, QUIT
         BALR  R14,R15              <- CALL ISPQRY
         LTR   R15,R15                 ISPF SERVICES AVAILABLE?
         BNZ   ZDLVOL9                 NO, QUIT
         WXTRN ISPQRY,ISPLINK          THEY ARE OPTIONAL
         CLI   MODE,C'S'               MODE=SINGLE?
         BNE   ZDLVOL9                 NO, QUIT
*VCOPY (ZDLDSN,ZDLVOL)
         LA    R14,L'ZDLDSN            max length
         LA    R15,L'ZDLVOL            max length
         STM   R14,R15,DEVT1           length array
*******  ISPLINK ($VCOPY,=C'(ZENVIR ZAPPLID ZUSER ZSCREEN)',           X
               SIXWORDS,ZENVIR,$MOVE)
         LA    R14,=C'VCOPY '          FUNCTION
         LA    R15,=C'(ZDLDSN ZDLVOL)' VARIABLE NAME
         LA    R0,DEVT1                length array
         LA    R1,ZDLDSN               value array
         LA    R2,=C'MOVE '            mode
         STM   R14,R2,EFTPARM          STORE PARM LIST
         OI    EFTPARM+16,X'80'        MARK END OF LIST
         L     R15,=A(ISPLINK)         ISPF SERVICES
         LA    R1,EFTPARM              PARM LIST ADDRESS
         BALR  R14,R15              <- ISSUE VCOPY
         LTR   R15,R15                 WENT OK?
         BNZ   ZDLVOL9                 NO, QUIT
         CLC   DSNAME,ZDLDSN           same dsname?
         BNE   ZDLVOL9                 NO, QUIT
         CLI   ZDLVOL,C'*'             ALIAS?
         BE    ZDLVOL9                 YES, QUIT
         MVC   VOLSER,ZDLVOL           yes, keep volser
         MVI   VOLGIVEN,C'Y'           VOLSER was supplied by DSLIST
         B     OBTAIN00                skip LOCATE
ZDLVOL9  EQU   *
*
*        Retrieve volser from the catalog and ignore migrated data sets
*
         L     R14,CAML26              CAMLST 1ST WORD
         LA    R15,DSNAME              DATA SET NAME
         SLR   R0,R0
         LA    R1,WK265                WORK AREA
         STM   R14,R1,EFTPARM          STORE RELOCATED CAMLST
         LOCATE EFTPARM                GET VOLSER AND DEVICE TYPE
         LTR   R15,R15                 CHECK FOR SUCCESSFUL COMPLETION
         BNZ   MSG26                   LOCATE FAILED, EXIT
         CLI   WK265+2+2,UCB3DACC      CHECK DEVICE CLASS
         BNE   MSG26B                  NOT DASD, EXIT
         MVC   VOLSER,WK265+2+4        KEEP VOLSER
         CLC   =C'MIGRAT',VOLSER       CHECK VOLSER
         BE    MSG26C                  MIGRATED BY HSM, EXIT
*
*        Read the F1-DSCB
*
OBTAIN00 L     R14,CAML28F1            CAMLST 1ST WORD
         LA    R15,DSNAME              DATA SET NAME
         LA    R0,VOLSER               VOL SERIAL
         LA    R1,DS1FMTID             FORMAT-1
         STM   R14,R1,EFTPARM          STORE RELOCATED CAMLST
         OBTAIN EFTPARM                READ F1-DSCB
         LTR   R15,R15                 CHECK FOR SUCCESSFUL COMPLETION
         BNZ   MSG28                   OBTAIN FAILED, EXIT
*
*        Skip data set if not a 100% pure PDS
*
         TM    DS1DSORG+0,DS1DSGPO     CHECK THAT DSORG=PO
         BNO   MSG28B                  EXIT IF DSORG IS NOT PO
         TM    DS1SMSFG,DS1PDSE        IS THIS A PDSE?            @PDSE
         BO    MSG28E                  YES, DO NOT PROCESS        @PDSE
         MVC   RECFM,DS1RECFM          KEEP RECFM FOR LATER USE
         CLI   MODE,C'S'               CHECK MODE
         BE    ALLOC000                JUMP IF MODE=SINGLE
         OC    DS1EXPDT,DS1EXPDT       CHECK NON-ZERO EXPDT
         BNZ   MSG28C                  NON ZERO EXPDT, JUMP
*
*        Skip data set if option "CHANGED" is specified
*        and the "data set changed" indicator is off
*
         CLI   CHANGED,C'N'            LOOK FOR "NOCHANGED" OPTION
         BE    OBTAIN45                BRANCH IF "NOCHANGED"
         TM    DS1DSIND,DS1DSCHA       CHECK FOR CHANGED BIT
         BNO   MSG28F                  JUMP IF CHANGED FLAG IS OFF
*
*        Skip data set if option "CHECK" is specified and the
*        job name stored by ASM2 is the same as my job's
*
OBTAIN45 CLI   CHECK,C'N'              LOOK FOR "NOCHECK" OPTION
         BE    ALLOC000                BRANCH IF "NOCHECK"
         CLI   DS1SYSCD+8,X'FF'        CHECK FOR ASM2 SIGNATURE
         BNE   ALLOC000                JUMP IF NO ASM2
         L     R14,ADDRTIOT            GET TIOT ADDRESS
         CLC   DS1SYSCD(8),0(R14)      CHECK JOB NAME
         BE    MSG28D                  JUMP IF SAME JOBNAME
***********************************************************************
*                                                                     *
*        ALLOCATE DATA SET TO BE COMPRESSED                           *
*                                                                     *
***********************************************************************
ALLOC000 BAL   R14,INIT99RB         <- INITIALIZE SVC99 RB
         USING S99RB,R3
         OI    S99FLG11,S99NOCNV       DO NOT USE EXISTING DD
         OI    S99FLG11,S99NOMNT       DO NOT MOUNT VOLUMES
         LA    R14,TU55DDN             DDNAME TEXT UNIT
         MVC   0(6,R14),=AL2(DALRTDDN,1,8)  RETURN DDNAME KEY
         LA    R15,TU02DSN             DSNAME TEXT UNIT
         MVC   0(6,R15),=AL2(DALDSNAM,1,44) DSNAME KEY
         L     R0,STATUS               ADDRESS OF STATUS KEY
         STM   R14,R0,S99RBEND+00      FIRST TO THIRD TEXT UNIT PTRS
         LA    R14,TU10VOL             VOLSER TEXT UNIT
         MVC   0(6,R14),=AL2(DALVLSER,1,6)  VOL SER KEY
         BAL   R15,ALLOC110         <-
         DC    AL2(DALUNIT,1,L'ALLOC109)
ALLOC109 DC    C'SYSALLDA',0H'0'
ALLOC110 STM   R14,R15,S99RBEND+12     4TH, 5TH TEXT UNIT PTRS
         OI    S99RBEND+16,X'80'       END OF LIST
         LA    R1,DFS99RBP             S99RBPTR
         DYNALLOC ,                    ISSUE SVC 99 (ALLOCATE)
         LTR   R15,R15
         BNZ   MSG99                   ALLOCATION FAILED, EXIT
         DROP  R3                      WAS S99RB
         MVC   DDNAME,TU55DDN+6        SAVE RETURNED DDNAME
         DEVTYPE DDNAME,DEVT1,DEVTAB   GET DEVICE CHARACTERISTICS
***********************************************************************
*                                                                     *
*        ALLOCATE SYSIN AND SYSPRINT DATA SETS.                       *
*                                                                     *
***********************************************************************
ALLOC200 CLI   TEMPALL,C'Y'            CHECK DDNAME ALREADY ALLOCATED
         BE    SYSINOK                 DD ALREADY ALLOCATED, OPEN IT
         MVI   TEMPALL,C'Y'            SHOW DDNAME ALREADY ALLOCATED
         BAL   R14,INIT99RB         <- INITIALIZE SVC99 RB
         USING S99RB,R3
         LA    R14,ALLOC215            DSNAME=&&SYSIN
         LA    R15,TU55DDN             DDNAME TEXT UNIT (ALREADY OK)
         LA    R0,=AL2(DALTRK,0)       SPACE=TRK
         LA    R1,ALLOC217             SPACE=(TRK,10)
         BAL   R2,ALLOC210          <-
         DC    AL2(DALUNIT,1,8),CL8'SYSDA'
ALLOC210 STM   R14,R2,S99RBEND+00      STORE TEXT UNIT PTRS
         LA    R1,DFS99RBP             S99RBPTR
         DYNALLOC ,                    ISSUE SVC 99 (ALLOCATE SYSIN)
         LTR   R15,R15
         BNZ   ALLOC255                ALLOCATION FAILED, EXIT
         MVC   IEBDDIN,TU55DDN+6       MOVE SYSIN DDNAME
         LA    R14,ALLOC216            DSNAME=&&SYSPRINT
         ST    R14,S99RBEND+00         STORE TEXT UNIT PTR
         LA    R1,DFS99RBP             S99RBPTR
         DYNALLOC ,                    ISSUE SVC 99 (ALLOCATE SYSPRINT)
         LTR   R15,R15
         BNZ   ALLOC255                ALLOCATION FAILED, EXIT
         MVC   IEBDDPRT,TU55DDN+6      MOVE SYSPRINT DDNAME
         B     SYSINOK
ALLOC215 DC    AL2(DALDSNAM,1,6),C'&&SYSIN'
ALLOC216 DC    AL2(DALDSNAM,1,9),C'&&SYSPRINT'
ALLOC217 DC    AL2(DALPRIME,1,3),AL3(10)           SPACE=(TRK,10)
         DROP  R3                      WAS S99RB
ALLOC255 ST    R15,MAXCC               RC=8
         BAL   R14,DAIRFAIL         <- Issue dynalloc error message
         B     FINISH                  exit
***********************************************************************
*                                                                     *
*        WRITE SYSIN FILE AND BUILD PARAMETER LIST FOR IEBCOPY.       *
*                                                                     *
***********************************************************************
SYSINOK  EQU   *
         USING IHADCB,DYNAMDCB
         MVC   IHADCB(DCBLEN),MODELDCB MOVE MODEL DCB
         MVC   DCBDDNAM,IEBDDIN        MOVE SYSIN DDNAME
         MVI   DCBRECFM,DCBRECF        RECFM=F
 ORG *-4                                                 PDSMAN/PM74127
         MVI   DCBRECFM,DCBRECF+DCBRECBR RECFM=FB        PDSMAN/PM74127
         MVC   DCBLRECL,=H'80'         LRECL=80          PDSMAN/PM74127
         MVC   DCBBLKSI,=H'80'         BLKSIZE=80
         MVI   DCBBUFNO,01             BUFNO=1
         LA    R0,IHADCB               BUILD OPEN LIST
         ST    R0,OPENLIST             BUILD OPEN LIST
         MVI   OPENLIST,X'8F'          OPEN MODE IS OUTPUT
         OPEN  MF=(E,OPENLIST)         OPEN IEBSYSIN
         LTR   R15,R15                 CHECK OPEN OK
         BNZ   FINISH                  OPEN FAILED, EXIT
         PUT   IHADCB                  LOCATE OUTPUT RECORD
         STRING ' COPY I=',(DDNAME,,T),',O=',(DDNAME,,T),',LIST=NO',   X
               INTO=((R1),80)
         CLOSE MF=(E,OPENLIST)         CLOSE IEBSYSIN
         FREEPOOL IHADCB               FREE BUFFERS
***********************************************************************
*                                                                     *
*        SCAN TIOT TO GET UCB ADDRESS.                                *
*                                                                     *
***********************************************************************
ENQ      SLR   R0,R0                   WORK REGISTER
         L     R1,ADDRTIOT             GET TIOT ADDRESS
         USING TIOT1,R1
ENQ015   AR    R1,R0                   BUMP UP TO NEXT ENTRY
         IC    R0,TIOELNGH             LENGTH OF CURRENT ENTRY
         CLC   DDNAME,TIOEDDNM         SAME DDNAME?
         BNE   ENQ015                  LOOP THROUGH TIOT
         ICM   R0,B'0111',TIOEFSRT     GET 24-BIT UCB ADDRESS
         ST    R0,ADDRUCB              STORE UCB ADDRESS FOR RESERVE
         DROP  R1                      WAS TIOT1
***********************************************************************
*        ENQ/RESERVE WITH ISPF/HEWL CONVENTIONS                       *
***********************************************************************
         MVC   DYNENQL(16),ENQMODEL    MOVE PATTERN ENQ LIST
         TM    RECFM,DS1RECFU          CHECK RECFM
         BO    ENQLKED                 RECFM=U, ASSUME LOAD LIBRARY
         RESERVE (SPFEDIT,DSNAME,E,44,SYSTEMS),UCB=ADDRUCB,            X
               MF=(E,DYNENQL)
         B     ENQDONE                 ENQ DONE FOR RECFM=F/V
SPFEDIT  DC    C'SPFEDIT '             QNAME FOR ISPF V2 ENQUEUES
SYSLMOD  DC    C'SYSIEWLP'             QNAME FOR LINK-EDIT
ENQLKED  L     R1,ADDRUCB              LOAD UCB ADDRESS
         TM    UCBTBYT2-UCBOB(R1),UCBRR SHARED DASD?
         BO    ENQLKEDR                IF SHARED, DO A RESERVE
         ENQ   (SYSLMOD,DSNAME,E,44,SYSTEM),MF=(E,DYNENQL)
         B     ENQDONE
ENQLKEDR RESERVE (SYSLMOD,DSNAME,E,44,SYSTEMS),UCB=ADDRUCB,            X
               MF=(E,DYNENQL)
ENQDONE  EQU   *
*
*        Re-read the F1-DSCB in case ENQ/RESERVE had to wait
*
         L     R14,CAML28F1            CAMLST 1ST WORD
         LA    R15,DSNAME              DATA SET NAME
         LA    R0,VOLSER               VOL SERIAL
         LA    R1,DS1FMTID             FORMAT-1
         STM   R14,R1,EFTPARM          STORE RELOCATED CAMLST
         OBTAIN EFTPARM                RE-READ F1-DSCB
***********************************************************************
*                                                                     *
*        CALL IEBCOPY VIA IKJEFTSR                                    *
*                                                                     *
*        If RECFM=U and LLAREFRESH is specified, COMPRCMD does NOT    *
*        invoke IEBCOPY; instead, it re-invokes itself via the TSR to *
*        execute the LLACOPY section, from which IEBCOPY is executed. *
*                                                                     *
***********************************************************************
TSR11    EQU   *
         MVI   IEBDD+1,IEBDDLEN        DDNAME LIST LENGTH
         LA    R0,=H'0'                IEBCOPY PARM
         LA    R1,IEBDD                DDN LIST
         STM   R0,R1,IEBPARM           BUILD PARAMETER LIST
         OI    IEBPARM+04,X'80'        MARK END OF LIST
*
*        BUILD PARM LIST FOR THE TSO/E SERVICE ROUTINE (IKJEFTSR)
*
         LA    R14,=X'0000,0102'       FLAGS
         LA    R15,IEBCOPY             PGM=IEBCOPY
         TM    RECFM,DS1RECFU          RECFM=U ?
         BNO   TSR23                   no, call IEBCOPY
         L     R1,DYNANSWR             LOAD PDL ADDRESS
         CLI   STATPCE+1-IKJPARMD(R1),3 LLAREFRESH option specified?
         BNE   TSR23                   no, call IEBCOPY
         LA    R15,OWNNAME             PGM=COMPRESS
TSR23    EQU   *
         LA    R0,=F'8'                LENGTH OF COMMAND BUFFER
         LA    R1,RETCODE              RETURN CODE
         LA    R2,RSNCODE              REASON CODE
         LA    R3,ABNDCODE             ABEND CODE
         LA    R4,IEBPARM              IEBCOPY PARM
         STM   R14,R4,EFTPARM          build parm list
         OI    EFTPARM+24,X'80'        END OF LIST
*
         STTMPMD ON,KEYS=ALL           TRAP CLEAR AND PA1 KEYS
         LA    R1,EFTPARM              PARM FOR IKFEFTSR
         L     R15,CVTPTR(,0)          ADDR OF CVT
         L     R15,CVTTVT-CVTMAP(,R15) ADDR OF TSVT
         L     R15,TSVTASF-TSVT(,R15)  ADDR OF IKJEFTSR/TSOLNK
         SYNCH (R15)                <- CALL THE TSO SERVICE ROUTINE
         LTR   R15,R15                 CHECK RETURN CODE
         BZ    DEQUEUE                 NOT HIGHER, JUMP
         MVI   PRINTMSG,C'Y'           PRINT IEBCOPY MESSAGES
         CLC   MAXCC,RETCODE           HIGHEST SO FAR?
         BH    DEQUEUE                 MAXCC HIGHER, JUMP
         MVC   MAXCC,RETCODE           KEEP MAXCC
DEQUEUE  DEQ   MF=(E,DYNENQL)          DEQ/RELEASE
         STTMPMD OFF                   ALLOW CLEAR AND PA1 KEYS AGAIN
         ICM   R15,B'1111',RETCODE     RC=0 from TSR ?
         BZ    TSR99                   YES, JUMP
**        STRING 'MSG009 COMPRESS is not authorised, option LLAREFRESH X
               is ignored.',INTO=MESSAGE
         STRING  'MSG009 Error during processing of LLAREFRESH option, X
               RC=',(RETCODE,F,L),', RSN=',(RSNCODE,,X),               X
               INTO=MESSAGE
         L     R1,DYNANSWR             LOAD PDL ADDRESS
         MVI   STATPCE+1-IKJPARMD(R1),1 Change LLAREFRESH to SHR
         BAL   R14,PUTLINE          <- write message
TSR99    EQU   *
***********************************************************************
*        Free the PDS that has just been compressed                   *
***********************************************************************
         BAL   R14,INIT99RB         <- INITIALIZE SVC99 RB
         USING S99RB,R3
         MVI   S99VERB,S99VRBUN        VERB IS "UNALLOCATE"
         LA    R14,TU55DDN             DDNAME TEXT UNIT
         MVC   0(6,R14),=AL2(DUNDDNAM,1,8)  DDNAME KEY
         MVC   6(8,R14),DDNAME         DDNAME
         ST    R14,S99RBEND+00         1ST & ONLY TEXT UNIT PTR
         OI    S99RBEND+00,X'80'       END OF LIST
         LA    R1,DFS99RBP             S99RBPTR
         DYNALLOC ,                    ISSUE SVC 99 (FREE PDS)
         DROP  R3                      WAS S99RB
***********************************************************************
*        COMPUTE PERCENTAGE OF SPACE USED AFTER COMPRESSION           *
***********************************************************************
         OC    RETCODE,RETCODE         CHECK IEBCOPY RETURN CODE
         BNZ   MSG08                   JUMP IF RC=00
         SLR   R1,R1                   make it relative to zero
         ICM   R1,B'0011',DS1LSTAR     last track used (relative to 0)
         LA    R2,1(,R1)               number of tracks used (before)
USED00   L     R14,CAML28F1            CAMLST 1ST WORD
         LA    R15,DSNAME              DATA SET NAME
         LA    R0,VOLSER               VOL SERIAL
         LA    R1,DS1FMTID             FORMAT-1
         STM   R14,R1,EFTPARM          STORE RELOCATED CAMLST
         OBTAIN EFTPARM                READ F1-DSCB
         LTR   R15,R15                 CHECK FOR SUCCESSFUL COMPLETION
         BNZ   USED99                  OBTAIN FAILED, EXIT
         SLR   R1,R1                   make it relative to zero
         ICM   R1,B'0011',DS1LSTAR     last track used (relative to 0)
         LA    R1,1(,R1)               number of tracks used
         STM   R1,R2,TRKSUSED          tracks used (after,before)
         SLR   R3,R3                   PREPARE IC
         IC    R3,DS1NOEPV             NUMBER OF EXTENTS
         LA    R4,DS1EXT1              ADDR OF 1ST EXTENT DESCRIPTOR
         SLR   R5,R5                   TRACK COUNTER
USED20   LA    R0,DS1EXT3+L'DS1EXT3    ADDR OF 3RD EXTENT DESCRIPTOR
         CR    R4,R0
         BNE   USED40                  JUMP IF NOT END OF F1-DSCB
USED30   L     R14,CAML28F3            CAMLST 1ST WORD
         LA    R15,DS1PTRDS            PTR TO F3-DSCB
         LA    R0,VOLSER               VOL SERIAL
         LA    R1,IECSDSL3             FORMAT-3
         STM   R14,R1,EFTPARM          STORE RELOCATED CAMLST
         OBTAIN EFTPARM                READ F1-DSCB
         LTR   R15,R15                 CHECK FOR SUCCESSFUL COMPLETION
         BNZ   USED99                  OBTAIN FAILED, EXIT
         LA    R4,DS3EXTNT             FIRST 4 EXTENTS OF F3-DSCB
         B     USED50                  GO PROCESS IT
USED40   LA    R0,DS3FMTID             1ST EXTENT DESC IN F3-DSCB
         CR    R4,R0
         BNE   USED50                  JUMP IF FIRST 4 DESC PROC'D
         LA    R4,DS3ADEXT             9 ADDITIONAL EXTENTS OF F3-DSCB
USED50   SLR   R0,R0
         ICM   R0,B'0011',2(R4)        GET START CYL
         MH    R0,DEVT1+10             NUMBER OF TRKS PER CYL
         AH    R0,4(,R4)               ADD START TRACK
         SLR   R1,R1
         ICM   R1,B'0011',6(R4)        GET END CYL
         MH    R1,DEVT1+10             NUMBER OF TRKS PER CYL
         AH    R1,8(,R4)               END TRACK
         LA    R1,1(,R1)               END TRK +1
         SLR   R1,R0                   number of tracks in this extent
         LR    R0,R5                   save first track number
         ALR   R5,R1                   tally allocated tracks
         CL    R0,TRKSUSED             EOF IN THIS EXTENT?
         BNL   USED57                  NO, JUMP
         CL    R5,TRKSUSED             EOF IN THIS EXTENT?
         BL    USED57                  NO, JUMP
         LA    R0,1                    increment
         AH    R0,0(,R4)               current extent number
         STC   R0,XTNTUSED             SAVE NUMBER OF LAST EXTENT USED
USED57   LA    R4,L'DS1EXT1(,R4)       NEXT EXTENT DESC
         BCT   R3,USED20               LOOP UNTIL ALL EXTENTS PROCESSED
USED90   SLR   R0,R0                   PREPARE DR
         LA    R1,1                    PREPARE AH
         AH    R1,DS1LSTAR+0           LAST TT USED
         MH    R1,=H'100'              PREPARE PERCENTAGE CALC
         DR    R0,R5                   PCT=(USED*100)/TOTAL
         LTR   R1,R1                   0% ==> 1%
         BNZ   *+8                     0% ==> 1%
         LA    R1,1                    0% ==> 1%
         ST    R1,RETCODE              PERCENTAGE FOR MSG00
USED99   STRING 'MSG000 COMPRESS successful for ',(DSNAME,,T),         X
               ', now ',(RETCODE,F,L),'% full.',INTO=MESSAGE
***********************************************************************
*        check if we're running under ISPF in "single" mode           *
***********************************************************************
         ICM   R15,B'1111',=A(ISPQRY)  ISPQRY AVAILABLE?
         BZ    ISSUEMSG                NO, QUIT
         BALR  R14,R15              <- CALL ISPQRY
         LTR   R15,R15                 ISPF SERVICES AVAILABLE?
         BNZ   ISSUEMSG                NO, QUIT
         CLI   MODE,C'S'               MODE=SINGLE?
         BNE   ISSUEMSG                NO, QUIT
***********************************************************************
*        REFRESH DISPLAY WHEN INVOKED FROM PDF 3.4 PANEL              *
***********************************************************************
*        ISPLINK VREPLACE ZDLREF Y
ZDLREF10 LA    R14,=C'VREPLACE'        SERVICE
         LA    R15,=C'ZDLREF  '        VARIABLE NAME
         LA    R0,=F'1'                VALUE LENGTH
         LA    R1,=C'Y'                ADDR OF VARIABLE VALUE
         STM   R14,R1,EFTPARM          STORE PARM LIST
         OI    EFTPARM+12,X'80'        MARK END OF LIST
         L     R15,=A(ISPLINK)         ISPF SERVICES
         LA    R1,EFTPARM              PARM LIST ADDRESS
         BALR  R14,R15              <- ISSUE VREPLACE
         LTR   R15,R15                 WENT OK?
         BNZ   ZDLREF99                NO, QUIT
*        ISPLINK VPUT (ZDLREF)
ZDLREF20 LA    R14,=C'VPUT'            SERVICE
         LA    R15,=C'ZDLREF  '        VARIABLE NAME
         STM   R14,R15,EFTPARM         STORE PARM LIST
         OI    EFTPARM+04,X'80'        MARK END OF LIST
         L     R15,=A(ISPLINK)         ISPF SERVICES
         LA    R1,EFTPARM              PARM LIST ADDRESS
         BALR  R14,R15              <- ISSUE VPUT
ZDLREF99 EQU   *
***********************************************************************
*        SETMSG function                                              *
***********************************************************************
SETMSG00 CLI   SETMSG,C'Y'             SETMSG option specified?
         BNE   SETMSG99                no, exit
*        ISPLINK VREPLACE ZMSG000S
SETMSG10 STRING 'Now ',(RETCODE,F,L),'% full',INTO=MESSAGE
         ST    R15,LENGTH              no, exit
         LA    R14,=C'VREPLACE'        SERVICE
         LA    R15,=C'ZMSG000S'        VARIABLE NAME
         LA    R0,LENGTH               VALUE LENGTH
         LA    R1,MESSAGE              VALUE
         STM   R14,R1,EFTPARM          STORE PARM LIST
         OI    EFTPARM+12,X'80'        MARK END OF LIST
         L     R15,=A(ISPLINK)         ISPF SERVICES
         LA    R1,EFTPARM              PARM LIST ADDRESS
         BALR  R14,R15              <- ISSUE VREPLACE
         LTR   R15,R15                 WENT OK?
         BNZ   SETMSG99                NO, QUIT
*        ISPLINK VREPLACE ZMSG000S
SETMSG20 LM    R1,R2,TRKSUSED          tracks used (after,before)
         SLR   R2,R1                   R2=tracks recovered by IEBCOPY
         STRING (DSNAME,,T),' successfully compressed',                X
               ', tracks_recovered=',((R2),,L),'.',                    X
               ' Total_tracks=',((R5),,L),                             X
               ',Tracks_used=',(TRKSUSED,F,L),                         X
               ',Total_extents=',(DS1NOEPV,FL1,L),                     X
               ',Extents_used=',(XTNTUSED,FL1,L),                      X
               INTO=WK265
         CLI   VOLGIVEN,C'Y'           CHECK IF VOLSER WAS SUPPLIED
         BNE   SETMSG25                NO, JUMP
         STRING (DSNAME,,T),' successfully compressed',                X
               ' on vol(',VOLSER,')',                                  X
               ', tracks_recovered=',((R2),,L),'.',                    X
               ' Total_tracks=',((R5),,L),                             X
               ',Tracks_used=',(TRKSUSED,F,L),                         X
               ',Total_extents=',(DS1NOEPV,FL1,L),                     X
               ',Extents_used=',(XTNTUSED,FL1,L),                      X
               INTO=WK265
SETMSG25 EQU   *
         ST    R15,LENGTH              no, exit
         LA    R14,=C'VREPLACE'        SERVICE
         LA    R15,=C'ZMSG000L'        VARIABLE NAME
         LA    R0,LENGTH               VALUE LENGTH
         LA    R1,WK265                VALUE
         STM   R14,R1,EFTPARM          STORE PARM LIST
         OI    EFTPARM+12,X'80'        MARK END OF LIST
         L     R15,=A(ISPLINK)         ISPF SERVICES
         LA    R1,EFTPARM              PARM LIST ADDRESS
         BALR  R14,R15              <- ISSUE VREPLACE
         LTR   R15,R15                 WENT OK?
         BNZ   SETMSG99                NO, QUIT
*        ISPLINK SETMSG(ISPZ000)
SETMSG80 LA    R14,=C'SETMSG'          SERVICE
         LA    R15,=C'ISPZ000 '        VARIABLE NAME
         STM   R14,R1,EFTPARM          STORE PARM LIST
         OI    EFTPARM+04,X'80'        MARK END OF LIST
         L     R15,=A(ISPLINK)         ISPF SERVICES
         LA    R1,EFTPARM              PARM LIST ADDRESS
         BALR  R14,R15              <- ISSUE VREPLACE
         LTR   R15,R15                 WENT OK?
         BZ    FINISH                  YES, EXIT
SETMSG99 EQU   *
         B     ISSUEMSG                VREPLACE/SETMSG failed
***********************************************************************
*        ISSUE MESSAGES                                               *
***********************************************************************
MSG08    STRING 'MSG008 COMPRESS failed for ',(DSNAME,,T),             X
               ', IEBCOPY return code is ',(RETCODE,F,L),'.',          X
               INTO=MESSAGE
         B     ISSUEMSG                ISSUE MESSAGE
MSG26    ST    R15,RETCODE             RETURN CODE
         STRING 'MSG26 LOCATE failed for ',(DSNAME,,T),                X
               ', return code is ',(RETCODE,F,L),'.',                  X
               INTO=MESSAGE
         B     CHECKSNG                ISSUE MESSAGE IF MODE=SINGLE
MSG26B   STRING 'MSG26B ',(DSNAME,,T),' is not a disk data set.',      X
               INTO=MESSAGE
         B     CHECKSNG                ISSUE MESSAGE IF MODE=SINGLE
MSG26C   STRING 'MSG26C ',(DSNAME,,T),' is a migrated data set.',      X
               INTO=MESSAGE
         B     CHECKSNG                ISSUE MESSAGE IF MODE=SINGLE
MSG28    ST    R15,RETCODE             RETURN CODE
         STRING 'MSG28 OBTAIN failed for ',(DSNAME,,T),' on volume(',  X
               VOLSER,'), return code is ',(RETCODE,F,L),'.',          X
               INTO=MESSAGE
         B     CHECKSNG                ISSUE MESSAGE IF MODE=SINGLE
MSG28B  STRING 'MSG28B ',(DSNAME,,T),' is not a partitioned data set.',X
               INTO=MESSAGE
         B     CHECKSNG                ISSUE MESSAGE IF MODE=SINGLE
MSG28C   STRING 'MSG28C COMPRESS bypassed for ',(DSNAME,,T),           X
               ', EXPDT is non-zero.',INTO=MESSAGE
         B     ISSUEMSG                ISSUE MESSAGE
MSG28D   STRING 'MSG28D COMPRESS bypassed for ',(DSNAME,,T),           X
               ', same ASM2ID.',INTO=MESSAGE
         B     ISSUEMSG                ISSUE MESSAGE
MSG28E   STRING 'MSG28E ',(DSNAME,,T),' is a PDSE.',INTO=MESSAGE
         B     ISSUEMSG                ISSUE MESSAGE              @PDSE
MSG28F   STRING 'MSG28F COMPRESS bypassed for ',(DSNAME,,T),           X
               ', data set changed indicator off.',                    X
               INTO=MESSAGE
         B     ISSUEMSG                ISSUE MESSAGE
MSG99    ST    R15,MAXCC               DYNALLOC Return Code
         BAL   R14,DAIRFAIL         <- issue dynalloc error message
****     STRING 'MSG99 DYNALLOC FAILED FOR ',(DSNAME,,T),              X
               ', return code is ',(RETCODE,F,L),'.',                  X
               INTO=MESSAGE
****     B     ISSUEMSG                ISSUE MESSAGE
         B     FINISH                  EXIT (DAIRFAIL issued message)
CHECKSNG CLI   MODE,C'S'               CHECK MODE
         BNE   PRINT000                JUMP IF MODE ¬= SINGLE
         MVI   MAXCC+L'MAXCC-1,08      RETURN CODE = 08
ISSUEMSG BAL   R14,PUTLINE          <- write message
***********************************************************************
*        READ IEBCOPY SYSPRINT IF THERE IS AN ERROR                   *
***********************************************************************
PRINT000 CLI   PRINTMSG,C'Y'           CHECK IEBCOPY ERRORS
         BNE   NEXTDSN                 JUMP IF RETCODE IS ZERO
         MVC   IHADCB(DCBLEN),MODELDCB MOVE MODEL DCB
         MVC   DCBDDNAM,IEBDDPRT       MOVE SYSPRINT DDNAME
         LA    R0,PRINT090             EODAD ROUTINE
         ST    R0,DCBEODAD             STORE IT INTO DCB
         MVI   OPENLIST,X'80'          OPEN MODE IS INPUT
         OPEN  MF=(E,OPENLIST)         OPEN SYSPRINT
         LTR   R15,R15                 CHECK OPEN OK
         BNZ   FINISH                  OPEN FAILED, EXIT
PRINT040 GET   IHADCB                  LOCATE INPUT RECORD
         CLI   0(R1),C'1'              CHECK CONTROL CHARACTER
         BE    PRINT040                IGNORE TITLE LINE
         STRING 'MSG062 ',(1(R1),120),INTO=MESSAGE
         BAL   R14,PUTLINE          <- write message
         B     PRINT040                LOOP UNTIL EODAD IS REACHED
PRINT090 CLOSE MF=(E,OPENLIST)         CLOSE SYSPRINT
         FREEPOOL IHADCB               FREE BUFFERS
***********************************************************************
*        GET READY TO PROCESS NEXT DSNAME IN TABLE.                   *
***********************************************************************
NEXTDSN  EQU   *
         CLI   ATTNFLAG,C'Y'           ATTENTION RECEIVED?
         BE    FINISH                  EXIT IF ATTENTION RECEIVED
         L     R2,ADDRCOMM             ECB/CIB POINTERS
         LM    R1,R2,0(R2)             PICK UP ECB/CIB ADDRESSES
         TM    0(R1),X'40'             COMM ECB POSTED?
         BNO   NEXTDSN4                NO, CONTINUE
         CLI   CIBVERB-CIB(R2),CIBSTOP STOP COMMAND ENTERED?
         BNE   NEXTDSN4                NO, CONTINUE
         STRING 'MSG60 COMPRESS terminated, STOP command received.',   X
               INTO=MESSAGE
         BAL   R14,PUTLINE          <- write message
         LA    R15,20                  RETURN CODE
         ST    R15,RETCODE             RETURN CODE
         B     FINISH                  EXIT IF STOP RECEIVED
*
*        next dsname in catalog work area
*
NEXTDSN4 EQU   *
         CLI   MODE,C'S'               MODE=SINGLE?
         BE    NEXTDSN5                YES, JUMP
         LA    R14,45                  LENGTH OF AN ENTRY
         L     R15,CTGWKA              WORK AREA ADDRESS
         A     R15,4(,R15)             POINT TO END OF WORK AREA
         BCTR  R15,0
         BXLE  R8,R14,PROCESS          PROCESS ANOTHER DATA SET
*--ENDLOOP
*
*        next dsname in command
*
NEXTDSN5 EQU   *
         ICM   R7,B'1111',PCE7NEXT     GET ADDRESS OF NEXT DSNAME
         BP    GETDSN                  NEXT DSNAME IN LIST
*ENDLOOP
         B     FINISH                  CLEAN-UP, RETURN
         DROP  R7                      PCE7
*
ATTNEXIT MVI   ATTNFLAG,C'1'           SHOW ATTENTION KEY PRESSED
         BR    R14
***********************************************************************
*                                                                     *
*        LLACOPY - re-entry from the TSR with AC=1                    *
*                                                                     *
***********************************************************************
LLACOPY  EQU   *
         TESTAUTH FCTN=1               CHECK AUTHORISATION
         LTR   R15,R15                 Am I authorised?
         BNZ   LLACOPY9                no, error
*
         MVC   IHADCB(DCBLEN),MODELDCB MOVE MODEL DCB
         MVI   DCBDSORG,DCBDSGPO       DSORG=PO
         MVI   DCBMACR1,DCBMRRD        MACRF=R
         MVI   DCBMACR2,0              MACRF=R
         L     R1,CPPL+4               A(IEBDD)
         MVC   DCBDDNAM,DDNAME-IEBDD(R1) move DDNAME to DCB
         MVI   DCBRECFM,DCBRECU        RECFM=U
         MVC   DCBBLKSI,=H'256'        BLKSIZE=256
*
         LA    R1,CPPL                 A(IEBPARM,IEBDD)
         LINK  EPLOC=IEBCOPY        <- call IEBCOPY (PARM in R1)
         LTR   R15,R15                 IEBCOPY OK?
***      BNZ   LLACOPY899              IEBCOPY OK?
*
         LA    R1,IHADCB               DCB ADDR
         ST    R1,OPENLIST             Build OPEN List
         MVI   OPENLIST,X'80'          OPEN INPUT
         OPEN  MF=(E,OPENLIST)         OPEN DIRECTORY
         LTR   R15,R15                 CHECK OPEN OK
         BNZ   LLACOPY9                OPEN FAILED, EXIT
         MODESET MODE=SUP              MODE=SUP for LLACOPY
*LOOP
LLACOPY2 READ  DECB1,SF,IHADCB,WK265,'S',MF=E
         CHECK DECB1
         LA    R3,WK265+2              1ST ENTRY
*--LOOP
LLACOPY4 CLI   0(R3),X'FF'             END OF DIRECTORY?
         BE    LLACOPY7                YES, LEAVE
         MVC   BLDLAREA(4),=Y(1,62)    number,length
         MVC   BLDLAREA+4(8),0(R3)     MEMBER NAME
         LLACOPY DCB=IHADCB,                                           X
               BLDLLIST=BLDLAREA,                                      X
               MF=(E,LLACOPYL)
***      LR    R3,R15                  SAVE RETURN CODE
         IC    R14,11(,R3)             "C" BYTE
         N     R14,=F'31'              NUMBER OF HALFWORDS
         LA    R14,12(R14,R14)         ENTRY LENGTH IN R14
         LH    R15,WK265               LENGTH USED IN DIR BLOCK
         LA    R15,WK265-1(R15)        END OF DIR BLOCK
         BXLE  R3,R14,LLACOPY4
*--ENDLOOP
         B     LLACOPY2                next directory block
*ENDLOOP
LLACOPY7 EQU   *
         MODESET MODE=PROB             Back to MODE=PROB
         CLOSE MF=(E,OPENLIST)         CLOSE DIRECTORY
         FREEPOOL IHADCB               FREE BUFFERS
         B     FINISH2                 Goback to TSR
LLACOPY9 EQU   *
**        STRING 'MSG009 COMPRESS is not authorised in AUTHTSR, option X
               LLAREFRESH is ignored.',INTO=MESSAGE
**       BAL   R14,PUTLINE          <- write message
         MVI   MAXCC+L'MAXCC-1,16      RETURN CODE = 16
         B     FINISH2                 Goback to TSR
IEBCOPY  DC    CL8'IEBCOPY'            PGM NAME
***********************************************************************
*        CLEAN UP, RETURN.                                            *
***********************************************************************
MSGGETM  STRING 'MSG63 GETMAIN failed, increase region.',INTO=MESSAGE
         BAL   R14,PUTLINE          <- write message
         MVI   MAXCC+L'MAXCC-1,20      RETURN CODE = 20
FINISH   EQU   *
         IKJRLSA DYNANSWR              RELEASE PDL
         ICM   R1,B'1111',CTGWKA       WORK AREA ADDRESS
         BZ    FINISH2                 JUMP IF NOT ALREADY GOTTEN
         L     R0,0(,R1)               WORK AREA LENGTH
         FREEMAIN RU,LV=(0),A=(1)      FREE GENERIC LOCATE WORK AREA
FINISH2  EQU   *
         LA    R0,DYNAML               GET LENGTH OF DYNAMIC AREA
         LR    R1,R13                  ADDRESS OF DYNAMIC AREA
         L     R2,MAXCC                HIGHEST IEBCOPY RETURN CODE
         L     R13,4(,R13)             CALLER'S SAVE AREA
         FREEMAIN RU,LV=(0),A=(1)      FREE DYNAMIC STORAGE AREA
         LR    R15,R2                  PASS RETURN CODE
         RETURN (14,12),RC=(15)        GOBACK TO CALLER
***********************************************************************
*        Write a message using IKJEFF02                               *
***********************************************************************
PUTLINE  LA    R0,L'MESSAGE            LENGTH OF INSERT
         ST    R0,MTLEN+00             LENGTH OF INSERT
         LA    R0,MESSAGE              RETURN CODE
         ST    R0,MTADDR+00            ADDRESS OF INSERT
         MVC   MTMSGID,=C'PRT '        MESSAGE ID
         L     R15,CVTPTR(,0)          ADDR OF CVT
         L     R15,CVTEFF02-CVTMAP(,R15) ADDR OF IKJEFF02
         LA    R1,MTPARML              POINT TO PPL
         BR    R15                     XCTL to IKJEFF02
***********************************************************************
*        INITIALIZE A DYNALLOC REQUEST BLOCK                          *
***********************************************************************
INIT99RB LA    R3,WK265                S99RB
         XC    0(S99RBEND-S99RB,R3),0(R3)  CLEAR DYNALLOC WORK SPACE
         USING S99RB,R3
         MVI   S99RBLN,S99RBEND-S99RB  RB LENGTH
         MVI   S99VERB,S99VRBAL        VERB IS "ALLOCATE"
         LA    R0,S99RBEND             END OF RB, START OF T.U. PTRS
         ST    R0,S99TXTPP             TEXT UNIT POINTERS
         ST    R3,DFS99RBP             S99RBPTR
         OI    DFS99RBP,X'80'          S99RBPND
         LA    R0,=AL1(0,DFSVC99)      PUTLINE ONLY, SVC99
         ST    R0,DFIDP                BUILD PARML FOR DAIRFAIL
         ST    R11,DFCPPLP             ADDR OF CPPL
         BR    R14
         DROP  R3                      S99RB
***********************************************************************
*        Invoke the DAIRFAIL routine
***********************************************************************
DAIRFAIL ST    R15,RETCODE             RETURN CODE
         LA    R0,RETCODE              RETURN CODE
         ST    R0,DFRCP                RETURN CODE
         LA    R0,=A(0)                NO ADDR FOR IKJEFF02
         ST    R0,DFJEFF02             RETURN CODE
         LOAD  EP=IKJEFF18             CALL DAIRFAIL
         LR    R15,R0                  pass EP addr
         LA    R1,DFPARMS              DAIRFAIL PARM LIST
         BR    R15                     CALL DAIRFAIL
***********************************************************************
*        MODEL CONTROL BLOCKS, MOVED TO DYNAMIC STORAGE               *
***********************************************************************
CAML26   CAMLST NAME,*-*,,*-*          CAMLST FOR LOCATE
CAML28F1 CAMLST SEARCH,*-*,*-*,*-*     CAMLST FOR OBTAIN - F1-DSCB
CAML28F3 CAMLST SEEK,*-*,*-*,*-*       CAMLST FOR OBTAIN - F3-DSCB
ENQMODEL RESERVE (*-*,*-*,E,44,SYSTEMS),UCB=*-*,MF=L
MODELDCB DCB   DSORG=PS,MACRF=(GL,PL)
DCBLEN   EQU   *-MODELDCB
***********************************************************************
*        DEFINE MESSAGES TO BE ISSUED VIA IKJEFF02                    *
***********************************************************************
MSGCSECT IKJTSMSG (,),PRT
         IKJTSMSG
***********************************************************************
*        DEFINE INPUT PARAMETERS FOR IKJPARS                          *
***********************************************************************
PCLCSECT IKJPARM
DSNPCE   IKJPOSIT DSTHING,USID,LIST,PROMPT='DATA SET NAME'
CHKPCE   IKJKEYWD
         IKJNAME 'CHECK'
         IKJNAME 'NOCHECK'
CHNGPCE  IKJKEYWD
         IKJNAME 'CHANGED'
         IKJNAME 'NOCHANGED'
STATPCE  IKJKEYWD DEFAULT='SHR'
         IKJNAME 'SHR'                 1
         IKJNAME 'OLD'                 2
         IKJNAME 'LLAREFRESH'          3
SETMPCE  IKJKEYWD
         IKJNAME 'SETMSG'
VOLPCE   IKJKEYWD
         IKJNAME 'VOLUME',SUBFLD=VOLSUBF,ALIAS='VOLSER'
VOLSUBF  IKJSUBF
VOLPCE2  IKJIDENT 'VOLUME',MAXLNTH=6,FIRST=ALPHANUM,OTHER=ALPHANUM
         IKJENDP
***********************************************************************
*        DYNAMIC STORAGE AREA                                         *
***********************************************************************
DYNAM    DSECT
         DS    18F                     SAVE AREA
DYN_CPPL DS    4F                      CPPL
OWNNAME  DS    CL8'COMPRESS'           own name from CDNAME
MAXCC    DS    F                       MAX RETURN CODE FROM IKJEFTSR
ATTNFLAG DS    C                       ATTENTION KEY PRESSED
RECFM    DS    C                       RECFM F/V/U
TEMPALL  DS    C                       TEMPORARY FILES ALLOCATED
MODE     DS    C                       SINGLE, CATALOG, VTOC
VOLGIVEN DS    C                       'Y' IF VOL PARAM SPECIFIED
CHECK    DS    C                       Y/N MEANS CHECK/NOCHECK
CHANGED  DS    C                       Y/N MEANS CHANGED/NOCHANGED
SETMSG   DS    C                       Y/N MEANS SETMSG
PRINTMSG DS    C                       'Y' TO PRINT IEBCOPY MESSAGES
RETCODE  DS    F                       RETURN CODE FROM IKJEFTSR
RSNCODE  DS    F                       REASON CODE FROM IKJEFTSR
ABNDCODE DS    F                       ABEND CODE FROM IKJEFTSR
IEBPARM  DS    A(*-*,IEBDD)            PARM LIST FOR IEBCOPY
IEBDD    DS    Y(IEBDDLEN)
         DS    C'SYSLIN  '           1 SYSLIN
         DS    XL8'00'               2 N/A
         DS    XL8'00'               3 N/A
         DS    C'SYSLIB  '           4 SYSLIB
IEBDDIN  DS    C'SYSIN   '           5 SYSIN
IEBDDPRT DS    C'SYSPRINT'           6 SYSPRINT
         DS    C'SYSPUNCH'           7 SYSPUNCH
IEBDDUT1 DS    C'SYSUT1  '           8 SYSUT1
IEBDDUT2 DS    C'SYSUT2  '           9 SYSUT2
         DS    C'SYSUT3  '          10 SYSUT3
         DS    C'SYSUT4  '          11 SYSUT4
IEBDDLEN EQU   *-(IEBDD+2)
DYNENQL  RESERVE (SYSLMOD,DSNAME,E,44,SYSTEMS),UCB=0,MF=L
DYNANSWR DS    F                       ANSWER AREA FOR PARSE
DYNUWA   DS    4F                      USER WORK AREA FOR PARSE
DYNPPL   DS    8F                      PPL FOR USE WITH PARSE
DYNECB   DS    F                       ECB FOR USE WITH PARSE
STATUS   DS    A                       STATUS KEY, SHR OR OLD
DSNPCE7  DS    A(PCE7)                 CURRENT DSNAME PCE
OPENLIST OPEN  IHADCB,MF=L             OPEN LIST
DYNAMDCB DCB   DSORG=PS,MACRF=(GL,PL)
         READ  DECB1,SF,MF=L
EXTRACTL EXTRACT ADDRTIOT,FIELDS=TIOT,MF=L
ADDRTIOT DS    A(TIOT)                 TIOT ADDRESS
ADDRCOMM DS    A                       COMM AREA ADDRESS
ADDRUCB  DS    A(UCBOB)                UCB ADDRESS FOR RESERVE
DEVT1    DS    5F                      DEVICE CHARACTERISTICS
EFTPARM  DS    8A                      PARM LIST FOR IKJEFTSR
DDNAME   DS    CL8                     DD NAME
TU02DSN  DS    AL2(DALDSNAM,1,44)   +0 DATA SET NAME KEY
DSNAME   DS    CL44                 +6 DATA SET NAME
TU10VOL  DS    AL2(DALVLSER,1,6)    +0 VOLSER KEY
VOLSER   DS    CL6                  +6 VOLUME SERIAL
TU55DDN  DS    AL2(DALRTDDN,1,8),CL8   RETURN DDNAME
LENGTH   DS    F                       message length
TRKSUSED DS    F,F                     tracks used (after,before)
XTNTUSED DS    FL1                     number of extents used
ZDLDSN   DS    CL44                    DSLIST dsname
ZDLVOL   DS    CL6                     DSLIST volser
*
         LLACOPY MF=(L,LLACOPYL)
BLDLAREA DS    Y(1,62),62X             LLACOPY
*
         IKJEFFMT MTDSECT=NO,MTFORMAT=NEW
         IKJEFFDF DFDSECT=NO,DFDSEC2=NO
*@@      IEZCTGPL DSECT=NO             CATALOG PARAMETER LIST
CTGPL    DS    0F
CTGOPTN1 DS    B              FIRST OPTION BYTE:
CTGNAME  EQU   X'04' .... .1..  CTGENT CONTAINS DSNAME
CTGGENLD EQU   X'01' .... ...1  GENERIC LOCATE REQUEST
CTGOPTN2 DS    B              SECOND OPTION BYTE
CTGOPTN3 DS    B              THIRD OPTION BYTE
CTGSUPLT EQU   X'10' ...1 ....  SUPERLOCATE FUNCTION
CTGAM0   EQU   X'01' .... ...1  OS/VS2 CATALOG MANAGMENT REQUEST
CTGOPTN4 DS    B              FOURTH OPTION BYTE
CTGENT   DS    A              ADDRESS OF CATALOG RECORD IDENTIFIER
CTGCAT   DS    A              ADDRESS OF CATALOG DSNAME OR ACB
CTGWKA   DS    A              ADDRESS OF CALLER'S WORK AREA
CTGOPTNS DS    B              CATALOG MANAGMENT SERVICES REQUEST OPTION
CTGF2WKA EQU   X'04' 0000 01..  FORMAT-2 WORK AREA
         DS    B
CTGTYPE  DS    C              TYPE OF CATALOG RECORD:
CTGTALIN EQU   C'A'             NON-VSAM DATA SET
CTGNOFLD DS    FL1            NUMBER OF ENTRIES IN CTGFIELD
CTGFDBK  DS    XL2            FEEDBACK AREA
CTGFBFLG DS    B,B            FLAGS (SUPERLOCATE)
         DS    2A             UNUSED HERE
CTGPLLEN EQU   *-CTGPL
WK265    DS    XL265                   WORK AREA FOR LOCATE
MESSAGE  DS    CL100                   WORK AREA IKJEFF02
         ORG   DYNAM+(((*+15-DYNAM)/16)*16)
         IECSDSL1 (1,3)                FORMAT-1 AND FORMAT-3 DSCB MAPS
         AIF   (D'DS1SMSFG).SMS2                                  @PDSE
         ORG   IECSDSL1+X'4E'                                     @PDSE
DS1SMSFG DS    XL1                 SYSTEM MANAGED STORAGE INDICATORS
DS1SMSDS EQU   X'80'  1... ....    SYSTEM MANAGED DATA SET
DS1PDSE  EQU   X'08'  .... 1...    DATA SET IS A PDSE
         ORG   ,                                                  @PDSE
.SMS2    ANOP                                                     @PDSE
         DS    0F
PGM_CBUF DS    CL256                   CBUF built when called as a pgm
DYNAML   EQU   *-DYNAM                 LENGTH OF WORK AREA
*
*              MACROS FROM SYS1.MACLIB
*
         IKJPPL                        PARSE PARAMETER LIST
         IKJCPPL                       COMMAND PROCESSOR PARM LIST
         IEFZB4D0                      DYNALLOC REQUEST BLOCK
         IEFZB4D2                      DYNALLOC TEXT UNIT KEYS
         DCBD  DSORG=PS,DEVD=DA        DCB DSECT
         YREGS                         REGISTER EQUATES
*
*        PCE7 DSECT (dsname)
*
PCE7     DSECT
PCE7ADDR DS    A                       STRING ADDRESS
PCE7LEN  DS    H                       STRING LENGTH
         DS    X                       IKJPARSE FLAGS
PCE7LEN2 DS    FL1                     len of non-generic part of name
         ORG   PCE7+24
PCE7NEXT DS    A(PCE7)                 next PCE7 or zero
*
*              MACROS FROM SYS1.MODGEN
*
TIOT     DSECT
         IEFTIOT1                      TIOT DSECT
*@@@     IEFUCBOB                      UCB DSECT
UCBOB    DSECT
UCBTBYT2 EQU   *+17,1                  UCB TYPE BYTE 2
UCBRR    EQU   X'20'                   RESERVE/RELEASE (SHARED DASD)
UCBTBYT3 EQU   *+18,1                  UCB TYPE BYTE 3
UCB3DACC EQU   X'20'                   DASD DEVICE CLASS
CIB      DSECT
         IEZCIB                        COMMAND INPUT BUFFER
         CVT   DSECT=YES,LIST=NO       CVT
         IKJTSVT                       TSO VECTOR TABLE
         IKJRB                         PRB
         IHACDE                        CDE
         STRING (GENERATE,,LOCTR)
         END   COMPRESS
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=SYS1.MODGEN,DISP=SHR
//         DD DSN=GILBERT.FILE183.PDS(STRING),DISP=SHR
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,5)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),BLKSIZE=3200
//*
//LKED    EXEC PGM=HEWL,PARM=(LIST,MAP,RENT)
//SYSLIN   DD DSN=*.HLASM.SYSLIN,DISP=(OLD,PASS)
//         DD *
 INCLUDE ISPLOAD(ISPLINK)
//ISPLOAD  DD DSN=ISP.SISPLOAD,DISP=SHR
//SYSLMOD  DD DSN=GILBERT.FILE183.LOAD(COMPRESS),DISP=SHR
//SYSPRINT DD SYSOUT=*
//*
//GO      EXEC PGM=IKJEFT1B,REGION=2M
//STEPLIB  DD DSN=*.LKED.SYSLMOD,DISP=SHR
//SYSTSPRT DD SYSOUT=*
//SYSPRINT DD SYSOUT=*
//SYSDEBUG DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*
//SYSTSIN  DD *
CALL *(COMPRESS) '''GILBERT.EXEC'''
COMPRESS ('GILBERT.EXEC' 'GILBERT.CLIST') NOCHECK
//


/*
/*        THIS IS THE "COMPRESS" EDIT MACRO.   21JAN89
/*
ISREDIT MACRO (DSN BATCH)
IF &STR(&DSN) = &STR() OR &STR(&DSN) = BATCH THEN -
  DO
    SET BATCH = &STR(&DSN)                   /* SAVE POSSIBLE BATCH OPT
    ISREDIT (ID1) = DATAID
    ISPEXEC LMQUERY DATAID(&ID1) DATASET(DSN) VOLUME(VOL) -
                    PROJECT(PROJECT) GROUP1(GROUP1) TYPE(TYPE)
    SET DSN     = &DSN                       /* TRUNCATE TRAILING SPACES
    SET PROJECT = &PROJECT                   /* TRUNCATE TRAILING SPACES
    SET GROUP1  = &GROUP1                    /* TRUNCATE TRAILING SPACES
    IF &STR(&DSN) = &STR() THEN -
      SET DSN   = &PROJECT..&GROUP1..&TYPE
    ELSE -
      DO
        IF &SUBSTR(1:1,&DSN) NE &STR(') THEN -
          IF &SYSPREF NE &STR() THEN SET DSN = '&SYSPREF..&DSN'
        IF  &VOL ¬= &STR() THEN SET &VOL = VOLUME(&VOL)
      END
  IF &BATCH ¬= BATCH THEN -
    DO
      SET ZEDSMSG = COMPRESS IN PROGRESS
      ISPEXEC CONTROL DISPLAY LOCK
      ISPEXEC DISPLAY MSG(ISRZ001)
      SET &SYSOUTTRAP = 1
      COMPRESS &DSN &VOL              /* INVOKE THE "COMPRESS" COMMAND
      IF &LASTCC = 0 THEN -
        DO
          SET &ZEDLMSG = &SYSOUTLINE1
          SET &I = &SYSINDEX(NOW,&STR(&ZEDLMSG))
          SET ZEDSMSG = &SUBSTR(&I:&LENGTH(&ZEDLMSG)-1,&ZEDLMSG)
          ISPEXEC SETMSG MSG(ISRZ001)
        END
      ELSE -
        WRITE &SYSOUTLINE1            /* ERROR MESSAGE
    END
  END
IF &BATCH = BATCH THEN -
  DO
    SETVAR1                        /* RETRIEVE ACCT, NAME  */
    SET JOBNM = &SUBSTR(1:8,&SYSUID.CPR   )
    SUBMIT * END(ZZ)
    //&JOBNM JOB &ACCOUNT,'&PRGNM',
    // NOTIFY=&SYSUID,CLASS=Z,MSGCLASS=H,COND=(4,LT)
    &STR(//*) COMPRESS DSN=&DSN
    &STR(//*) SUBMITTED &SYSDATE &SYSTIME
    //COMPRESS EXEC PGM=IKJEFT01,REGION=2M
    //SYSTSPRT DD  SYSOUT=*
    //SYSTSIN  DD  *
    COMPRESS &DSN &VOL
    //COND99  EXEC PGM=CANMSGCL,PARM=1 PURGE THE JOB AFTER 1 HOUR
    //STEPLIB  DD  DSN=SYS2.LINKLIB,DISP=SHR    APF LIB
    ZZ
  END
ELSE -
  COMPRESS &DSN                     /* USER SPECIFIED A DATA SET NAME



   >>>>>>>>> The REXX EDIT macro is in the COMPRESS member <<<<<<<<<

