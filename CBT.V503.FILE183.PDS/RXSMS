//GILBERTR JOB (ACCT#),RXSMS,
//*RESTART=TMP,
// NOTIFY=&SYSUID,
// CLASS=A,MSGCLASS=H,COND=(0,NE)
//HLASM EXEC PGM=ASMA90,
// PARM='OBJECT,NODECK,NOESD,NORLD,NOXREF,USING(WARN(8))'
***********************************************************************
*                                                                     *
*            COPYRIGHT (C) 1993-1999 GILBERT SAINT-FLOUR              *
*                       ALL RIGHTS RESERVED                           *
*                                                                     *
* MODULE NAME = RXSMS                                                 *
*                                                                     *
* DESCRIPTIVE NAME = Retrieve SMS Information in a REXX exec          *
*                                                                     *
* STATUS = R100                                                       *
*                                                                     *
* FUNCTION = This assembler sub-routine can be invoked in a REXX      *
*            exec to retrieve information from the SMS sub-system     *
*            or from a volume's VTOC.                                 *
*                                                                     *
* AUTHOR = Gilbert Saint-Flour <carlos@gsf-soft.com>                  *
*          http://gsf-soft.com/Freeware/                              *
*                                                                     *
* ENVIRONMENT = SEE BELOW                                             *
*                                                                     *
*    DEPENDENCIES: MVS/ESA 4.3 (or above) or OS/390 or z/OS           *
*                  STRING macro                                       *
*                                                                     *
* MODULE TYPE = PROCEDURE, (CSECT TYPE)                               *
*                                                                     *
*    PROCESSOR = IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 2K                                                 *
*                                                                     *
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31,                   *
*                 PROBLEM STATE, KEY 8                                *
*                 APF AUTHORIZATION: NONE                             *
*                                                                     *
* SYNTAX  =  See below                                                *
*                                                                     *
*    CALL RXSMS     function,                                         *
*                   stemname                                          *
*                   <,search argument>                                *
*      or                                                             *
*                                                                     *
*    rc=RXSMS(function,stemname<,search argument>)                    *
*                                                                     *
*    Arguments:                                                       *
*                                                                     *
*         function  This argument is a 3-character function code      *
*                   which indicates the type of information that      *
*                   is to be retrieved from SMS.  The following       *
*                   values are supported:                             *
*                                                                     *
*                     AVL   All volumes in current configuration      *
*                     SGL   List of all Storage Groups                *
*                     SGV   Volser list for a given Storage Group     *
*                     VSG   Storage Group for a given volser          *
*                     VOL   Volume definition for a given volser      *
*                     DCL   List of all Data Classes                  *
*                     SCL   List of all Storage Classes               *
*                     MCL   List of all Management Classes            *
*                     LSP   LSPACE                                    *
*                                                                     *
*         stemname  the stem of the family of variables which         *
*                   are set to the returned data.                     *
*                                                                     *
*         search arg  is the volser or SG name for which data is      *
*                     to be retrieved from SMS.  This argument        *
*                     is mandatory for the SGV, VSG and VOL           *
*                     functions and must be omitted for all           *
*                     other function.                                 *
*                                                                     *
*    Examples:                                                        *
*                                                                     *
*         Retrieve a list of all of the Data Classes currently        *
*         defined in the SMS configuration into the "dc." variable.   *
*                                                                     *
*            CALL RXSMS 'DCL','dc.'                                   *
*            IF rc=0 THEN DO i=1 TO dc.0                              *
*              SAY i 'SC =' sc.i                                      *
*            END                                                      *
*                                                                     *
*         Retrieve the Storage Group to which the VOL123 volume       *
*         belongs into the sg.1 variable:                             *
*                                                                     *
*            IF RXSMS('VSG','sg.','VOL123') THEN                      *
*              SAY 'volume VOL123 belongs to SG=' sg.1                *
*                                                                     *
*         Retrieve all the volumes that belong to the "SGPROD2"       *
*         Storage Group into the "vol." variables:                    *
*                                                                     *
*            IF RXSMS('SGV','vol.') = 0 THEN                          *
*              DO i=1 TO vol.0                                        *
*               SAY i 'VOL:' vol.i                                    *
*              END                                                    *
*                                                                     *
* Format of the Data Returned                                         *
*                                                                     *
*         RXSMS returns three types of data:                          *
*                                                                     *
*         1. a return-code in the RC variable;                        *
*            see "return-codes" below.                                *
*                                                                     *
*         2. the number of objects returned, in the stem.0            *
*            variable.  For example, if CALL RXSMS 'SGL','sg.'        *
*            is issued, the number of Storage Groups is returned      *
*            in the sg.0 variable.                                    *
*                                                                     *
*         3. the objects requested are returned in var.1 through      *
*            var.n, where n=var.0                                     *
*                                                                     *
*            The format of the data returned depends on the type      *
*            of object it represents.  The following table shows      *
*            the format of the data for each of the supported         *
*            function codes:                                          *
*                                                                     *
*              AVL   Volume record (12 words)                         *
*              SGL   Storage Group record (10 words)                  *
*              SGV   Volume record (12 words)                         *
*              VSG   Storage Group record (10 words)                  *
*              VOL   Volume record (12 words)                         *
*              DCL   Data Class name (1 to 30 characters)             *
*              SCL   Storage Class name (1 to 30 characters)          *
*              MCL   Management Class name (1 to 30 characters)       *
*              LSPACE Data returned by the LSPACE macro               *
*                                                                     *
*    The Volume record is made up of 12 words (see example below).    *
*                                                                     *
*      1   volume serial number                                       *
*      2   name of storage group                                      *
*      3   user-ID of last updater                                    *
*      4   date of last update                                        *
*      5   time of last update                                        *
*      6   track capacity (bytes)                                     *
*      7   ucb address (or zero if the device is off-line)            *
*      8   total space (MB)                                           *
*      9   free space (MB)                                            *
*     10   largest free extent (MB)                                   *
*     11   flags (VLDFLAGS)                                           *
*     12   status in storage group (VLDSGST)                          *
*                                                                     *
*    Example of a volume record, as returned from RXSMS:              *
*                                                                     *
*      PRIM10 SG2 JIM 1997/03/27 16:03 56664 F49F00 2042 179 67 00 01 *
*                                                                     *
*    The Storage Group record is made up of 10 words.                 *
*                                                                     *
*      1   name of storage group                                      *
*      2   user-ID of last updater                                    *
*      3   date of last update                                        *
*      4   time of last update                                        *
*      5   flags (SDGFLAGS)                                           *
*      6   SG type (0=pool, 1=VIO)                                    *
*      7   VIO max size (MB)                                          *
*      8   VIO unit type                                              *
*      9   high threshold (0-99%)                                     *
*     10   low threshold (0-99%)                                      *
*     11   description (max 30 characters)                            *
*                                                                     *
*    Example of a storege group record, as returned from RXSMS:       *
*                                                                     *
*       SG2 JIM 1996/06/03 20:57 10 0 0 ? 99 0 DEFAULT STORAGE GROUP  *
*                                                                     *
*    The LSPACE record is made up of 19 words.                        *
*                                                                     *
*      1   volume serial                                              *
*      2   LSPACE return area status byte                             *
*      3   LSPACE volume status byte                                  *
*      4   Number of free extents                                     *
*      5   total free cylinders                                       *
*      6   total additional free tracks                               *
*      7   number of cylinders in largest free extent                 *
*      8   number of additional tracks in largest free extent         *
*      9   format-0 count                                             *
*     10   free VIR count                                             *
*     11   fragmentation index                                        *
*     12   VTOC index (DS4VTOCI)                                      *
*     13   Volume's SMS attributes (DS4SMSFG)                         *
*     14   available DSCBs (DS4DSREC)                                 *
*     15   Number of Cylinders (DS4DEVSZ)                             *
*     16   Tracks per Cylinders (DS4DEVSZ)                            *
*     17   Track Size (DS4DEVTK)                                      *
*     18   DSCBs per track (DS4DEVDT)                                 *
*     19   Directory Blocks per track (DS4DEVDB)                      *
*                                                                     *
*    Example of a LSPACE record, as returned from RXSMS:              *
*                                                                     *
*     SYSCAT E0 C0 2 0 4 0 2 235 14 1000 81 00 262 100 15 47968 53 46 *
*                                                                     *
* RETURN-CODES = See below                                            *
*                                                                     *
*         The RXSMS function returns a return code that indicates     *
*         whether information was successfully retrieved.  The        *
*         return-code is stored into the RC special variable.         *
*                                                                     *
*         The following RXSMS return code values are possible:        *
*                                                                     *
*         0    Data was retrieved into the specified stem variable.   *
*              var.0 is set to the number of objects retrieved.       *
*                                                                     *
*         4    No data was retrieved; var.0 is set to 0.              *
*                                                                     *
*         nnnn   Error retrieving the data, nnnn is the SSSA          *
*                reason code (see IEFSSSA macro).                     *
*                                                                     *
*         1nn    UCBSCAN macro failed with R15=nn (LSPACE only)       *
*                                                                     *
*         2nn    LSPACE macro failed with R15=nn (LSPACE only)        *
*                                                                     *
*   Error in Argument List                                            *
*                                                                     *
*         12   Invalid Service requested.                             *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
* 100 Initial release                                                 *
*                                                                     *
&REL     SETC  'R100'                                                 *
***********************************************************************
RXSMS    CSECT
RXSMS    RMODE ANY
         SAVE  (14,12),,'GSF Utilities - RXSMS &REL'
         LR    R12,R15
         USING RXSMS,R12
*---------------------------------------------------------------------*
*                                                                     *
*        ALLOCATE DYNAMIC STORAGE                                     *
*                                                                     *
*---------------------------------------------------------------------*
         GETMAIN R,LV=DYNAML
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LA    R14,72(,R1)             CLEAR WORKING STORAGE
         LA    R15,DYNAML-72           CLEAR WORKING STORAGE
         SLR   R1,R1                   CLEAR WORKING STORAGE
         MVCL  R14,R0                  CLEAR WORKING STORAGE
         LM    R13,R1,8(R13)           SET R13, RELOAD R14-R1
         USING DYNAM,R13
         ST    R0,ADDR_OF_ENVBLOCK     ENVIRONMENT BLOCK
         ST    R1,ADDR_OF_EFPL         External Function Parm List
         MVI   BLANKS,C' '             a bunch of blanks
         MVC   BLANKS+1(L'BLANKS-1),BLANKS
*---------------------------------------------------------------------*
*                                                                     *
*        BUILD THE SHVBLOCK                                           *
*                                                                     *
*---------------------------------------------------------------------*
         USING SHVBLOCK,DYNAM_SHVB
         MVI   SHVCODE,SHVSTORE        STORE VARIABLE
         LA    R0,VALUE                ADDRESS OF VALUE BUFFER
         ST    R0,SHVVALA              ADDRESS OF VALUE BUFFER
         LA    R0,VARNAME              ADDRESS OF VARIABLE NAME
         ST    R0,SHVNAMA              ADDRESS OF VARIABLE NAME
         L     R15,ADDR_OF_ENVBLOCK    Environment block
         L     R15,ENVBLOCK_IRXEXTE-ENVBLOCK(,R15) A(IRXEXTE)
         L     R15,IRXEXCOM-IRXEXTE(,R15)          A(IRXEXCOM)
         L     R0,ADDR_OF_ENVBLOCK     ENVIRONMENT BLOCK
         LA    R1,IRXEXCOM_PARM        parm list
         STM   R15,R1,IRXEXCOM_REGS    A(IRXEXCOM,ENVBLK,IRXPARM)
         LA    R14,=C'IRXEXCOM'        Shared Variable Routine
         SLR   R15,R15                 PARM2=0
         SLR   R0,R0                   PARM3=0
         LA    R1,SHVBLOCK             PARM4
         STM   R14,R1,IRXEXCOM_PARM    build parm list for IRXEXCOM
         OI    IRXEXCOM_PARM+12,X'80'  VL=1
*---------------------------------------------------------------------*
*                                                                     *
*        PROCESS ARGUMENTS                                            *
*                                                                     *
*---------------------------------------------------------------------*
         USING IEFSSSA,SSSA_WRK
         L     R1,ADDR_OF_EFPL         External Function Parm List
         L     R11,EFPLARG-EFPL(,R1)   ADDR OF ARG LIST
         LM    R2,R3,8*1-8(R11)        1st ARG (service)
         LTR   R3,R3                   service specified?
         BNP   ARG1N                   no, error
         CH    R3,=H'3'                length=3?
         BNE   ARG1N                   no, jump
         BAL   R1,ARG1L                br around table
         DC    AL1(SSSA1SGL),C'SGL'    SG list
         DC    AL1(SSSA1SGV),C'SGV'    volser list for given SG
         DC    AL1(SSSA1AVL),C'AVL'    all volumes in config
         DC    AL1(SSSA1VSG),C'VSG'    SG for a volser
         DC    AL1(SSSA1VOL),C'VOL'    return volume definition
         DC    AL1(SSSA1DCL),C'DCL'    DC list
         DC    AL1(SSSA1SCL),C'SCL'    SC list
         DC    AL1(SSSA1MCL),C'MCL'    MC list
         DC    X'FF',0H'0'             end of table
*loop
ARG1L    CLC   1(3,R1),0(R2)           compare function code
         BE    ARG1T                   match, leave
         LA    R1,1+3(,R1)             next entry in the table
         CLI   0(R1),X'FF'             end of table?
         BNE   ARG1L                   no, next entry
*endloop
ARG1N    EQU   *                       no service specified
         CH    R3,=H'6'                length=6?
         BNE   ARG1N2                  no, error
         CLC   =C'LSPACE',0(R2)        FUNC=LSPACE?
         BNE   ARG1N2                  no, error
         MVI   SSSA1TYP,X'EE'          save SSSA1 function code
         B     ARG1X
ARG1N2   EQU   *                       no service specified
         B     EXIT12                  no service, exit with RC=12
ARG1T    EQU   *                       no service specified
         MVC   SSSA1TYP,0(R1)          save SSSA1 function code
ARG1X    EQU   *
*
         LM    R2,R3,8*2-8(R11)        2ND ARG (VAR NAME)
         STM   R2,R3,STEMNAME          2ND ARG (VAR NAME)
         LTR   R3,R3                   stemname specified?
         BNP   EXIT12                  no var name, exit with RC=12
         OI    0(R2),X'40'             convert to uppercase
         LA    R2,1(,R2)               convert to uppercase
         BCT   R3,*-8                  convert to uppercase
ARG2X    EQU   *
*
         LM    R2,R3,8*3-8(R11)        3rd ARG (search arg)
         LTR   R3,R3                   zero length?
         BZ    ARG3X                   yes, jump
         BM    ARG9X                   eof, exit
         MVI   SSSA1CNT+3,1            COUNT=1
         STRING ((R2),(R3)),INTO=SSSA1NAM move SG/vol name
         STH   R15,SSSA1NML            save length
ARG3X    EQU   *
*
ARG9X    EQU   *                       end of arg list
         CLI   SSSA1TYP,X'EE'          func=LSPACE?
         BE    LSPACE1                 yes, go there
*---------------------------------------------------------------------*
*                                                                     *
*        BUILD SSOB                                                   *
*                                                                     *
*---------------------------------------------------------------------*
         USING SSOB,SSOB_WRK
         LA    R0,SSOB                 SSOB address
         ST    R0,SSOB_PTR             SAVE ADDRESSES
         OI    SSOB_PTR,X'80'          SSOB_PTR
         MVC   SSOBID,=C'SSOB'         CB ACRONYM
         LA    R0,SSOBHSIZ             LENGTH OF THE SSOB
         STH   R0,SSOBLEN              STORE INTO SSOB
         LA    R0,SSOBSSMS             FUNCTION CODE 55
         STH   R0,SSOBFUNC             STORE INTO SSOB
*
         L     R1,CVTPTR               CVT
         L     R1,CVTJESCT-CVTMAP(,R1) JES COMM TABLE
         L     R1,JESCTEXT-JESCT(,R1)  JESCT EXTENSION
         MVC   SSOBSSIB,JESSMSIB-JESPEXT(R1) SMS SSIB
*
*        BUILD SSSA
*
         LA    R8,SSSA_WRK             SSSA WORK AREA
         ST    R8,SSOBINDV             FUNCTION-DEPENDENT AREA
         LA    R0,SSSALN+SSSA1LN+L'SSSA1NMS
         STH   R0,SSSALEN              LENGTH OF SSSA
         MVC   SSSAID,=C'SSSA'         CB ACRONYM
         MVI   SSSAVER+1,SSOBSSVR      VERSION
         MVI   SSSASFN+1,SSSAACTV      SUB-FUNCTION CODE
         MVI   SSSAIFLG,SSSANAUT       NON-AUTHORIZED CALLER
*
*        ISSUE THE IEFSSREQ MACRO
*
         LA    R1,SSOB_PTR             SSOB_PTR
         IEFSSREQ                  <== CALL SMS
*
*        PROCESS THE RETURNED DATA
*
         L     R4,SSSA1PTR             ADDR OF RETURNED DATA
         USING IGDVLD,R4
         L     R5,SSSA1ALN             LENGTH
         ICM   R7,B'1111',SSSARSN      reason code from sub-function
         BNZ   SET_RC                  error, quit
*---------------------------------------------------------------------*
*                                                                     *
*        Set var.0 to number of objects returned                      *
*                                                                     *
*---------------------------------------------------------------------*
         LTR   R1,R4                   any data returned?
         BZ    *+8                     no, do not use VLDPCNT
         L     R1,VLDPCNT              number of items returned
         STRING ((R1),,L),INTO=VALUE   edit number of objects
         ST    R15,SHVVALL             save length into shvblock
         SLR   R5,R5                   var.0
         BAL   R14,SETVAR           <- set variable
         LTR   R4,R4                   any data returned?
         BZ    GOBACK4                 no, exit
*---------------------------------------------------------------------*
*                                                                     *
*        Set stem variables                                           *
*                                                                     *
*---------------------------------------------------------------------*
         LA    R5,1                    suffix for stem variable
         LA    R6,VLDEF                first definition
         USING VLDEF,R6
*loop
LOOP1    LH    R0,VLDVSLEN             length of object name
         ST    R0,SHVVALL              save into shvblock
         LA    R1,VLDVSER              name of object
         ST    R1,SHVVALA              save into shvblock
         CLC   =CL8'IGDVLD',VLDPID     is this a VLD?
         BNE   LOOP5                   no, return only the object name
         BAL   R14,VLD00            <- edit the volume definition
         B     LOOP8                   no, return only the object name
LOOP5    CLC   =CL8'IGDSGD',VLDPID     is this an SGD?
         BNE   LOOP8                   no, return only the object name
         BAL   R14,SGD00            <- edit the storgrp definition
LOOP8    BAL   R14,SETVAR           <- set variable
*@SNAP VLDFNAME,(VARNAME,12)
         LA    R5,1(,R5)               next i
         AL    R6,VLDPLEN              next definition
         CL    R5,VLDPCNT              finished?
         BNH   LOOP1                   not yet
*endloop
         L     R1,SSSA1PTR             ADDR OF RETURNED DATA
         L     R2,SSSA1ALN             LENGTH
         FREEMAIN RU,A=(R1),LV=(R2)    Free data area returned by SMS
         B     GOBACK
         DROP  R4,R6                   IGDVLD,VLDEF
*---------------------------------------------------------------------*
*                                                                     *
*        FUNC=LSPACE                                                  *
*                                                                     *
*---------------------------------------------------------------------*
LSPACE1  EQU   *
         LA    R4,UCBAREA48            copy of the UCB
         UCBSCAN COPY,                                                 X
               VOLSER=SSSA1NAM,                                        X
               UCBAREA=(R4),                                           X
               DYNAMIC=YES,                                            X
               WORKAREA=WORK256,                                       X
               MF=(E,UCBSCANL,COMPLETE)
         LTR   R7,R15
         LA    R7,100(,R15)            rc=1nn
         BNZ   SET_RC
         MVC   LSPACEL(LSPACELL),LSPACEM
         LSPACE UCB=(R4),DATA=LSPACED,F4DSCB=IECSDSL4,MF=(E,LSPACEL)
         LTR   R7,R15
         LA    R7,200(,R15)            rc=2nn
         BNZ   SET_RC
         USING LSPDATA,LSPACED
         STRING (SSSA1NAM,,T),         VOLUME SERIAL                   X
               1X,(LSPDRETN,,X),       RETURN AREA STATUS BYTE         X
               1X,(LSPDSTAT,,X),       VOLUME STATUS BYTE              X
               1X,(LSPDNEXT,F,L),      NUMBER OF FREE EXTENTS          X
               1X,(LSPDTCYL,F,L),      TOTAL FREE CYLINDERS            X
               1X,(LSPDTTRK,F,L),      TOTAL ADDITIONAL FREE TRKS      X
               1X,(LSPDLCYL,F,L),      NUMBER OF CYLINERS IN           X
               1X,(LSPDLTRK,F,L),      NUMBER OF ADDL TRACKS IN        X
               1X,(LSPDF0S,F,L),       FORMAT 0 COUNT                  X
               1X,(LSPDVIRS,F,L),      FREE VIR COUNT                  X
               1X,(LSPDFRAG,F,L),      FRAGMENTATION INDEX             X
               1X,(DS4VTOCI,,X),       VTOC INDEX                      X
               1X,(DS4SMSFG,,X),       SMS FLAGS                       X
               1X,(DS4DSREC,FL2,L),    NUMBER OF AVAILABLE DSCBS       X
               1X,(DS4DEVSZ,FL2,L),    NUMBER OF CYLINDERS             X
               1X,(DS4DEVSZ+2,FL2,L),  NUMBER OF TRACKS PER CYLINDER   X
               1X,(DS4DEVTK,FL2,L),    TRACK CAPACITY                  X
               1X,(DS4DEVDT,FL1,L),    NO OF DSCBS PER TRACK           X
               1X,(DS4DEVDB,FL1,L),    DIR BLOCKS PER TRACK            X
               INTO=VALUE
         ST    R15,SHVVALL             save length into shvblock
         LA    R5,1                    var.1
         BAL   R14,SETVAR           <- set variable
         MVI   VALUE,C'1'              var.0=1
         LA    R15,1                   length=1
         ST    R15,SHVVALL             save length into shvblock
         SLR   R5,R5                   var.0
         BAL   R14,SETVAR           <- set variable
*---------------------------------------------------------------------*
*                                                                     *
*        Set return code                                              *
*                                                                     *
*---------------------------------------------------------------------*
GOBACK   SLR   R7,R7                   RC=0: OK
         B     SET_RC
GOBACK4  LA    R7,4                    RC=4: "no data returned"
*---------------------------------------------------------------------*
*                                                                     *
*        Pass return code in RC variable                              *
*                                                                     *
*---------------------------------------------------------------------*
SET_RC   EQU   *
         LA    R0,VALUE                addr of value
         ST    R0,SHVVALA              save addr into shvblock
         STRING ((R7),,L),INTO=VALUE   edit RC
         ST    R15,SHVVALL             save length into shvblock
         MVC   VARNAME(2),=C'RC'       variable name
         LA    R15,2                   LENGTH OF VARIABLE NAME
         ST    R15,SHVNAML             LENGTH OF VARIABLE NAME
         LM    R15,R1,IRXEXCOM_REGS    A(IRXEXCOM,ENVBLK,IRXPARM)
         SYNCH (R15)                   CALL IRXEXCOM
*
*        return RC value into EVALBLOCK
*
         L     R1,ADDR_OF_EFPL         External Function Parm List
         L     R2,EFPLEVAL-EFPL(,R1)   addr of EVALBLOCK ptr
         L     R4,0(,R2)               addr of EVALBLOCK
         USING EVALBLOCK,R4
         STRING ((R7),,L),INTO=(EVALBLOCK_EVDATA,8)
         ST    R15,EVALBLOCK_EVLEN     store length
         DROP  R4                      EVALBLOCK
*
         SLR   R7,R7                   RC=0
         B     EXIT
*---------------------------------------------------------------------*
*                                                                     *
*        CLEAN-UP AND EXIT                                            *
*                                                                     *
*---------------------------------------------------------------------*
EXIT12   LA    R7,12                   RC=12: input parameter error
*
EXIT     LR    R1,R13                  A(DYNAM)
         L     R13,4(,R13)
         FREEMAIN R,LV=DYNAML,A=(R1)
         LR    R15,R7                  pass return code
         RETURN (14,12),RC=(15)
*---------------------------------------------------------------------*
*                                                                     *
*        Set a variable                                               *
*                                                                     *
*        1. build variable name by concatenating the stem name        *
*           (such as "SG.") to the sequence number in R5              *
*        2. pass control to IRXEXCOM                                  *
*                                                                     *
*---------------------------------------------------------------------*
SETVAR   BAKR  R14,0
         LM    R2,R3,STEMNAME          2ND ARG (VAR NAME)
         STRING ((R2),(R3)),((R5),,L),INTO=VARNAME
         ST    R15,SHVNAML             LENGTH OF VARIABLE NAME
         LM    R15,R1,IRXEXCOM_REGS    A(IRXEXCOM,ENVBLK,IRXPARM)
         SYNCH (R15)                   CALL IRXEXCOM
         PR
***********************************************************************
*                                                                     *
*        Edit a volume definition                                     *
*                                                                     *
***********************************************************************
VLD00    BAKR  R14,0
         LA    R1,VALUE                point at string
         ST    R1,SHVVALA              save addr into shvblock
         USING VLDEF,R6
         LH    R1,VLDVSLEN             length of vol ser
         LH    R2,VLDSGLEN             length of stor grp
         STRING (VLDVSER,(R1)),        volume serial                   X
               1X,(VLDSTGRP,(R2)),     storage group                   X
               1X,(VLDDUSER,,T),       userid of last updater          X
               1X,VLDDDATE,            date of last update             X
               1X,(VLDDTIME,,T),       time of last update             X
               1X,(VLDTRKSZ,H,L),      track capacity                  X
               1X,(VLDNUCBA,,X),       UCB address                     X
               1X,(VLDNTCPY,F,L),      total capacity in megabytes     X
               1X,(VLDNFREE,F,L),      amount free in megabytes        X
               1X,(VLDNLEXT,F,L),      largest free extent in MB       X
               1X,(VLDFLAGS,,X),       flags                           X
               1X,(VLDSGST,,X),        status on this system           X
               INTO=VALUE
         ST    R15,SHVVALL             save length into shvblock
VLD99    PR
***********************************************************************
*                                                                     *
*        Edit a Storage Group Definition                              *
*                                                                     *
***********************************************************************
SGD00    BAKR  R14,0
         LA    R1,VALUE                point at string
         ST    R1,SHVVALA              save addr into shvblock
         USING SGDEF,R6
         LH    R1,SGDNMLEN             length of vol ser
         STRING (SGDFNAME,(R1)),       name of the SG                  X
               1X,(SGDFUSER,,T),       userid of last updater          X
               1X,SGDFDATE,            date of last update             X
               1X,(SGDFTIME,,T),       time of last update             X
               1X,(SGDFLAGS,,X),       flags                           X
               1X,(SGDFTYPE,FL1,L),    SG type 0=pool 1=VIO            X
               1X,(SGDFVMAX,F,L),      VIO max size                    X
               1X,(SGDFVUNT,,X),       VIO unit type                   X
               1X,(SGDFHTHR,FL1,L),    high threshold 0-99%            X
               1X,(SGDFLTHR,FL1,L),    low threshold 0-99%             X
               1X,(SGDFDESC,,T),       description                     X
               INTO=VALUE
         ST    R15,SHVVALL             save length into shvblock
SGD99    PR
LSPACEM  LSPACE MF=L
***********************************************************************
*                                                                     *
*        Dynamic Storage Area                                         *
*                                                                     *
***********************************************************************
DYNAM    DSECT
         DS    18F
DWD      DS    D                       work area for CVD
ADDR_OF_ENVBLOCK DS A(ENVBLOCK)        ENVIRONMENT BLOCK
ADDR_OF_EFPL   DS A(EFPL)              External Function Parm List
STEMNAME DS    A,F                     ADDR/LEN OF STEM NAME
IRXEXCOM_REGS DS A(R15,R0,R1)          IRXEXCOM
IRXEXCOM_PARM DS 4A                    IRXEXCOM
SSOB_PTR DS    A(SSOB+X'80000000')
DYNAM_SHVB DS  XL(SHVBLEN)             SHVB (IRXEXCOM)
SSOB_WRK DS    XL(SSOBHSIZ)            SSOB
SSSA_WRK DS    XL(SSSALN+SSSA1LN+L'SSSA1NMS)
         UCBSCAN MF=(L,UCBSCANL)
UCBAREA48 DS   XL48                    returned copy of the UCB
LSPACEL  LSPACE MF=L
LSPACELL EQU   *-LSPACEL
LSPACED  LSPACE MF=(L,DATA)            LSPACE Data area
         IECSDSL1 4
         ORG   DYNAM+((*+256-1-DYNAM)/256)*256
VARNAME  DS    CL256                   variable name
VALUE    DS    CL255,C
BLANKS   DS    CL256                   a bunch of blanks
WORK256  DS    XL256                   work area for UCBSCAN
DYNAML   EQU   *-DYNAM
         PRINT NOGEN
         IRXEFPL DSECT=YES             External Function Parm List
         IRXENVB                       Environment Block
         IRXEXTE                       External Function Entry Points
         IRXSHVB                       Shared REXX Variable Req Block
         IRXEVALB                      Evaluation Block
*
         CVT   DSECT=YES               CVT
         IEFJESCT                      JES CVT
         IEFJSSOB ,                    SSOB HEADER DSECT
         IEFSSSA                       SSOB EXTENSION FOR SMS
         IGDVLD                        VOLUME DEFINITION
         IGDSGD                        Storage Group Definition
LSPDATA  LSPACE MF=(D,DATA)            LSPACE DATA
         STRING GENERATE
         YREGS                         Register Equates (R0-R15)
         END
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=SYS1.MODGEN,DISP=SHR
//         DD DSN=CBTTAPE.FILE183.PDS,DISP=SHR  STRING macro
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),BLKSIZE=3200
//*
//LKED    EXEC PGM=IEWL,PARM='MAP,RENT,REFR'
//SYSLIN   DD DSN=*.HLASM.SYSLIN,DISP=(OLD,PASS)
//SYSLMOD  DD DSN=CBTTAPE.FILE183.LOAD(RXSMS),DISP=SHR
//SYSPRINT DD SYSOUT=*
//*
//TMP     EXEC PGM=IKJEFT01,TIME=(,5)
//SYSTSPRT DD SYSOUT=*
//SYSSNAP  DD SYSOUT=*
//SYSTSIN  DD *
TSOLIB ACT DA('CBTTAPE.FILE183.LOAD')
REXXTRY
CALL RXSMS 'LSPACE','LS.','SYSCAT'
SAY 'LSPACE rc='rc 'LS.0='ls.0 'LS.1='ls.1
/*
SAY COPIES('-',130)
SAY RXSMS('VOL','vol.','PRIM10')
SAY 'VOL rc='rc 'vol.0='vol.0 'vol.1='vol.1
CALL RXSMS 'AVL','avl.'
SAY 'AVL rc='rc 'avl.0='avl.0
DO i=1 TO avl.0
  SAY ' ' i avl.i
END
CALL RXSMS 'VSG','grp.','PRIM13'
SAY 'VSG rc='rc 'grp.0='grp.0 'grp.1='grp.1 'vol=PRIM13'
CALL RXSMS 'SGL','SG.'
SAY 'SGL rc='rc 'sg.0='sg.0
DO i=1 TO sg.0
  SAY i 'SG='sg.i
    CALL RXSMS 'SGV','VOL.',WORD(sg.i,1)
    SAY 'SGV rc='rc 'vol.0='vol.0
    DO j=1 TO vol.0
      SAY ' ' j vol.j
      DROP vol.j
    END
END
CALL RXSMS 'SCL','SC.'
SAY 'SCL rc='rc 'sc.0='sc.0
DO i=1 TO sc.0
  SAY i 'SC='sc.i
END
CALL RXSMS 'DCL','DC.'
SAY 'DCL rc='rc 'dc.0='dc.0
DO i=1 TO dc.0
  SAY i 'DC='dc.i
END
CALL RXSMS 'MCL','MC.'
SAY 'MCL rc='rc 'mc.0='mc.0
DO i=1 TO mc.0
  SAY i 'MC='mc.i
END
