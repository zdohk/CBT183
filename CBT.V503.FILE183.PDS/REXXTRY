//GILBERTR JOB (ACCT#),REXXTRY,
// NOTIFY=&SYSUID,
// CLASS=A,MSGCLASS=H,COND=(1,LT)
//HLASM EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)
***********************************************************************
*                                                                     *
*            COPYRIGHT (C) 1991-2009 GILBERT SAINT-FLOUR              *
*                       ALL RIGHTS RESERVED                           *
*                                                                     *
* MODULE NAME = REXXTRY                                               *
*                                                                     *
* DESCRIPTIVE NAME = Execute a line of REXX code and set &result      *
*                                                                     *
* STATUS = R104                                                       *
*                                                                     *
* FUNCTION = This TSO command processor can be used to execute a      *
*            one-line REXX exec as a sub-routine. The REXX exec,      *
*            which can be a single REXX instruction or multiple       *
*            instructions separated by semi-colons, must be           *
*            specified as an argument in the REXXTRY command,         *
*            for example:                                             *
*                                                                     *
*               REXXTRY a='A'; b='B'; RETURN a || b                   *
*                                                                     *
*            REXXTRY can be invoked anywhere a TSO command can be     *
*            entered: READY prompt, PDF opt 6, ISPF TSO command,      *
*            CLIST, ISPF panel, ISPF command table, etc.              *
*                                                                     *
*            If the REXX exec ends with a RETURN instruction (as      *
*            shown in the example above), the returned value is       *
*            stored into the &RESULT variable.  The length of the     *
*            data returned by the exec is limited to 256 bytes.       *
*                                                                     *
*            In the ISPF environment, if the REXX exec needs to       *
*            access ISPF variables using VGET and VPUT, REXXTRY       *
*            must be invoked with LANG(CREX).  However, specifying    *
*            LANG(CREX) prevents REXXTRY from storing the data        *
*            returned by the REXX exec into &RESULT.  Consequently,   *
*            the REXX exec must be designed to use RETURN or          *
*            VGET/VPUT, but not both.  This restriction is imposed    *
*            by the method ISPF uses to handle variables in the       *
*            compiled REXX environment.                               *
*                                                                     *
*            REXXTRY can also be invoked in batch mode, in which      *
*            case the REXX code is (1) an argument to the command,
*            or (2) all the input lines present in SYSTSIN after      *
*            the REXXTRY command.                                     *
*                                                                     *
*            Note that in batch mode, REXXTRY invokes the REXX        *
*            code as a command and does not set &RESULT.              *
*                                                                     *
* AUTHOR = Gilbert Saint-Flour <carlos@gsf-soft.com>                  *
*          http://gsf-soft.com/Freeware/                              *
*                                                                     *
* ENVIRONMENT = SEE BELOW                                             *
*                                                                     *
*    DEPENDENCIES: MVS/ESA, OS/390 or z/OS                            *
*                                                                     *
* MODULE TYPE = PROCEDURE, (CSECT TYPE)                               *
*                                                                     *
*    PROCESSOR = IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 2K                                                 *
*                                                                     *
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31,                   *
*                 PROBLEM STATE, KEY 8                                *
*                 APF AUTHORIZATION: NONE                             *
*                                                                     *
* OPERATION = See Examples below:                                     *
*                                                                     *
*   Invocation in a CLIST:                                            *
*                                                                     *
*     SET string = ABC DEF GHI JKL                                    *
*     REXXTRY parm="&string"; +                                       *
*             n=WORDS(parm); +                                        *
*             RETURN WORD(parm,n)                                     *
*     WRITE LASTCC=&LASTCC RESULT=&RESULT                             *
*                                                                     *
*   Invocation in an ISPF Panel; the REXX code ends with RETURN:      *
*                                                                     *
*     %RESULT=&result                                                 *
*     )INIT                                                           *
*       IF (&result=&Z) &result=0                                     *
*     )PROC                                                           *
*       &ZSEL='CMD(REXXTRY RETURN &result+1) MODE(FSCR)'              *
*     )END                                                            *
*                                                                     *
*   Invocation in an ISPF Panel; the REXX code uses VGET and VPUT:    *
*                                                                     *
*     %RESULT=&result                                                 *
*     )INIT                                                           *
*       IF (&result=&Z) &result=0                                     *
*     )PROC                                                           *
*       &rexx='"VGET result"; result=&result+1; "VPUT result"'        *
*       &ZSEL='CMD(REXXTRY ADDRESS ISPEXEC; &rexx) LANG(CREX)'        *
*     )END                                                            *
*                                                                     *
*   Invocation in BATCH mode.                                         *
*                                                                     *
*     //TMP     EXEC PGM=IKJEFT01                                     *
*     //SYSTSPRT DD SYSOUT=*                                          *
*     //SYSTSIN  DD *                                                 *
*     REXXTRY                                                         *
*     SAY "this is my REXX exec (line 1)"                             *
*     SAY "this is my REXX exec (line 2)"                             *
*     EXIT 3                                                          *
*                                                                     *
*   BATCH mode - execute an in-line CLIST which uses REXXTRY          *
*                to execute an in-line REXX exec                      *
*                                                                     *
*     //CLISTRX EXEC PGM=IKJEFT01                                     *
*     //STEPLIB  DD DSN=CBTTAPE.FILE183.LOAD,DISP=SHR    REXXTRY      *
*     //SYSPROC  DD DSN=CBTTAPE.FILE183.PDS,DISP=SHR     EXECUTE      *
*     //SYSTSPRT DD SYSOUT=*                                          *
*     //SYSTSIN  DD *                                                 *
*     %EXECUTE CLIST                                                  *
*       /* The CLIST starts here */                                   *
*     CONTROL LIST CONLIST                              /*CLIST*/     *
*     WRITE Start of the CLIST                          /*CLIST*/     *
*     REXXTRY A=1;                                      /*REXX*/ +    *
*             B=2;                                      /*REXX*/ +    *
*             UID=USERID();                             /*REXX*/ +    *
*             RETURN(A+B UID)                           /*REXX*/      *
*     WRITE LASTCC=&LASTCC RESULT='&RESULT'             /*CLIST*/     *
*     EXIT CODE(&LASTCC)                                /*CLIST*/     *
*                                                                     *
*   Invocation via a CALL command                                     *
*                                                                     *
*     //VIACALL EXEC PGM=IKJEFT01                                     *
*     //SYSTSPRT DD SYSOUT=*                                          *
*     //SYSTSIN  DD *                                                 *
*     CALL 'CBTTAPE.FILE183.LOAD(REXXTRY)' 'SAY XXX; SAY YYY'         *
*     /*                                                              *
*     //VIACALL2 EXEC PGM=IKJEFT01                                    *
*     //SYSTSPRT DD SYSOUT=*                                          *
*     //SYSTSIN  DD *                                                 *
*     CALL 'CBTTAPE.FILE183.LOAD(REXXTRY)'                            *
*     SAY XXX                                                         *
*     SAY YYY                                                         *
*     /*                                                              *
*                                                                     *
* PARAMETERS = None                                                   *
*                                                                     *
* ABENDS = SEE BELOW                                                  *
*                                                                     *
*        U0020       PARM missing in CALL *(REXXTRY) in TSO On-Line   *
*                                                                     *
* RETURN-CODES = SEE BELOW                                            *
*                                                                     *
*        nnn         Return-code nnn from the REXX interpreter        *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
* 100 Packaging for distribution on CBT Tape                     1998 *
* 101 In BATCH mode, REXXTRY reads REXX code from SYSTSIN        1999 *
* 102 CALL FILE183.LOAD(REXXTRY) 'SAY XXX; SAY YYY'              2009 *
* 103 CALL FILE183.LOAD(REXXTRY) /* read SYSTSIN */                   *
* 104 Quit if there is no cmd and we're not in TSO/Batch              *
*                                                                     *
&REL     SETC  'R104'                                                 *
***********************************************************************
REXXTRY  CSECT
REXXTRY  RMODE ANY
&D       SETC  '&SYSDATE'(7,2)'-'.'&SYSDATE'(1,2)'-'.'&SYSDATE'(4,2)
         SAVE  (14,12),,'GSF Utilities - REXXTRY &REL - 20&D &SYSTIME'
         LR    R12,R15
         USING REXXTRY,R12
*
*        Initialization
*
         GETMAIN R,LV=DYNAML           GET DYNAMIC STORAGE
         ST    R13,4(,R1)              chain save areas
         ST    R1,8(,R13)              chain save areas
         LM    R13,R1,8(R13)           load R13, reload R1
         USING DYNAM,R13
         XC    DYNAM+72(256),DYNAM+72  CLEAR DYNAMIC STORAGE
         MVC   DYNCPPL(16),0(R1)       A(CPPL)
         USING CPPL,DYNCPPL
         L     R10,CVTPTR(,0)          CVT ADDRESS
         L     R10,CVTTVT-CVTMAP(,R10) TSO/E VECTOR TABLE
         USING TSVT,R10
         L     R9,CPPLECT              pick up ECT address
         USING ECT,R9
*
*        BUILD CPPL IF INVOKED VIA CALL
*
         TM    CPPL,X'80'              CPPL or PARM ?
         BZ    STEP2                   CPPL, jump
         L     R1,X'0224'(,0)          PSAAOLD   A(ASCB)
         L     R1,X'006C'(,R1)         ASCBASXB  A(ASXB)
         L     R1,X'0014'(,R1)         ASXBLWA   A(LWA)
         L     R9,X'0020'(,R1)         LWAPECT   A(ECT)
         ST    R9,CPPLECT              Store ECT address
         L     R1,X'0018'(,R1)         LWAPSCB   A(PSCB)
         ST    R1,CPPLPSCB             A(PSCB)
         MVC   CPPLUPT,X'0034'(R1)     PSCBUPT   A(UPT)
         L     R2,CPPLCBUF             addr of command buffer
         LA    R4,2(,R2)               R4: first byte of REXX code
         LH    R5,0(,R2)               R5: length of REXX code
         LTR   R5,R5                   PARM specified?
         BNZ   STEP25                  YES, process PARM
*
*        CALL *(REXXTRY) with no PARM only works in batch
*
         TM    ECTSWS,ECTBKGRD         Running in a batch job?
         BO    STEP4                   YES, read SYSTSIN
         ABEND 0020                    NO, ABEND U0020
*
*        Build address/length array
*
STEP2    L     R2,CPPLCBUF             addr of command buffer
         LH    R3,0(,R2)               length of command buffer
         LA    R4,4(,R2)               addr of REXXTRY command
         AH    R4,2(,R2)               R4: first byte of REXX code
         LA    R5,0(R3,R2)             end of command buffer
         SR    R5,R4                   R5: length of REXX code
         BZ    STEP4                   no REXX code, use GETLINE
STEP25   EQU   *
         CLC   =C'/*',0(R4)            just a comment?
         BNE   STEP5                   no, use REXX code
*
*        Read REXX statements from SYSTSIN
*
         USING IOPL,DYNIOPL            SET UP ADDRESSABILITY TO IOPL
STEP4    MVC   IOPLUPT,CPPLUPT         MOVE UPT ADDRESS INTO IOPL
         ST    R9,IOPLECT              store ECT address into IOPL
         LA    R0,DYNECB               EVENT CONTROL BLOCK
         ST    R0,IOPLECB              STORE ECB INTO IOPL
         USING GTPB,DYNGTPB
*
*        if I'm not in TSO/Batch, display hdr and quit with rc=20
*
         TM    ECTSWS,ECTBKGRD         Running in a batch job?
         BO    STEP4D                  YES, read SYSTSIN
         SLR   R6,R6
         IC    R6,REXXTRY+4            hdr length
         MVC   VECTORS(64),REXXTRY+5   copy hdr to R24 for TPUT
         TPUT  VECTORS,(R6)            Issue error message
         LA    R6,20                   RC=20
         B     STEP9                   QUIT
*
STEP4D   EQU   *
         LA    R5,VECTORS              FIRST VECTOR
         TM    ECTSWS,ECTBKGRD         Running in a batch job?
*LOOP
STEP4G   MVI   DYNECB,0                RESET POST BIT
         GETLINE INPUT=ISTACK,         READ FROM STACK                 X
               TERMGET=(EDIT,WAIT),                                    X
               PARM=GTPB,                                              X
               MF=(E,IOPL)
         CH    R15,=H'16'              EOD?
         BE    STEP4X                  YES, EXIT
         TM    ECTSWS,ECTLOGF          EOD?
         BO    STEP4X                  YES, EXIT
         L     R2,GTPBIBUF             INPUT BUFFER
         LH    R3,0(,R2)               LENGTH
         LA    R2,4(,R2)               POINT PAST LENGTH
         SH    R3,=H'4'                SUBTRACT LENGTH
         STM   R2,R3,0(R5)             STORE ADDRESS, LENGTH
         LA    R5,8(,R5)               NEXT VECTOR
         B     STEP4G
*ENDLOOP
STEP4X   LR    R0,R5                   addr/len array
         MVI   IRXFLAGS,X'80'          invoke as a command
         B     STEP6
         DROP  R9                      ECT
*
*        Execute REXX code specified in the command
*
STEP5    STM   R4,R5,VECTORS           build addr/len array
         LA    R0,VECTORS+4*2          addr/len array
         MVI   IRXFLAGS,X'40'          invoke as an external function
*
*        Execute the REXX code as a sub-routine
*
STEP6    LA    R1,VECTORS              first vector in R1
         SLR   R0,R1                   calc length of vectors
         BAL   R14,RUNEXEC          <- Run the EXEC
         LR    R6,R15                  save return code
*
*        Set the TSO/E and ISPF variables
*
STEP7    CLI   IRXFLAGS,X'80'          exec invoked as a command?
         BE    STEP9                   yes, skip SETVAR
 ORG STEP7
         BAL   R14,SETVAR           <- SET VARIABLE
         SLR   R6,R6                   RC=0
*
*        Clean up and exit
*
STEP9    LR    R1,R13                  ADDRESS OF DYNAMIC AREA
         L     R13,4(,R13)             CALLER'S SAVE AREA
         FREEMAIN R,LV=DYNAML,A=(1)    FREE DYNAMIC AREA
         LR    R15,R6                  PASS RETURN CODE
         RETURN (14,12),RC=(15)        GOBACK, PASS RC IN R15
***********************************************************************
*                                                                     *
*        Execute the in-storage REXX exec as a sub-routine.           *
*                                                                     *
***********************************************************************
RUNEXEC  BAKR  R14,0                   Save Registers
*
*        Build the In-storage block (INSTBLK)
*
         LA    R6,DYNAM_INSTBLK_HEADER ADDR OF IN-STORAGE BLOCK
         USING INSTBLK_HEADER,R6
         ST    R6,PTR_INSTBLK          ADDR OF IN-STORAGE BLOCK
         ST    R1,INSTBLK_ADDRESS      STORE INTO IN-STORAGE BLOCK
         ST    R0,INSTBLK_USEDLEN      STORE INTO IN-STORAGE BLOCK
         MVC   INSTBLK_ACRONYM,=C'IRXINSTB'
         MVC   INSTBLK_HDRLEN,=A(L'INSTBLK_HEADER)
         MVC   INSTBLK_MEMBER,=CL8' '
         MVC   INSTBLK_DDNAME,=C'SYSIN   '
         MVC   INSTBLK_SUBCOM,=CL8' '
*
*        Build the Evaluation Block (EVALBLOCK)
*
         LA    R7,DYNAM_EVALBLOCK      ADDR OF EVAL BLOCK
         USING EVALBLOCK,R7
         ST    R7,PTR_EVALBLOCK        ADDR OF EXEC BLOCK
         LA    R0,EVALBLOCK_LENGTH/8   LENGTH IN DOUBLE-WORDS
         ST    R0,EVALBLOCK_EVSIZE     LENGTH IN DOUBLE-WORDS
         LA    R0,DATA_LENGTH          LENGTH OF DATA IN BYTES
         ST    R0,EVALBLOCK_EVLEN      LENGTH OF DATA IN BYTES
*
*        Invoke the REXX Interpreter (IRXEXEC)
*
         LA    R14,DUMMY               no EXEC block
         SLR   R15,R15                 no arguments
         LA    R0,IRXFLAGS             flags for IRXEXEC
         LA    R1,PTR_INSTBLK          IN-STORAGE BLOCK
         LA    R2,DUMMY                CPPL
         LA    R3,PTR_EVALBLOCK        EVAL BLOCK
         LA    R4,DUMMY                WORK AREA
         LA    R5,DUMMY                USER WORK AREA
         STM   R14,R5,PARMLIST         build parm list
         OI    PARMLIST+28,X'80'       eol flag
         L     R15,TSVTEXE             A(IRXEXEC)
         LA    R1,PARMLIST             PARM LIST ADDRESS
         SYNCH (R15)                <- CALL IRXEXEC
*
*        Check the completion-code from the REXX interpreter
*
         LTR   R15,R15                 check return code
         BNZ   RUNEXEC9                non-zero, exit
*
*        Retrieve the data returned by the REXX EXEC
*
         LA    R1,EVALBLOCK_EVDATA     data passed in the RETURN instr
         L     R2,EVALBLOCK_EVLEN      length of the returned data
         STM   R1,R2,VARVALUE          store address and length
*
*        If the in-line exec was invoked as a command,
*        use the returned value as REXXTRY's return-code
*
         LTR   R2,R2                   anything returned?
         BNP   RUNEXEC9                no, exit
         CLI   IRXFLAGS,X'80'          exec invoked as a command?
         BNE   RUNEXEC9                no, exit
         BCTR  R2,0                    for EX
         PACK  DWD,0(*-*,R1)           PACK VALUE
         EX    R2,*-6                  PACK VALUE
         CVB   R15,DWD                 get rc in R15
*
RUNEXEC9 PR                            Restore registers, go back
         DROP  R6,R7                   INSTBLK,EVALBLK
***********************************************************************
*                                                                     *
*        Set ISPF and TSO/E variables                                 *
*                                                                     *
***********************************************************************
SETVAR   BAKR  R14,0                   Save Registers
*
*        Invoke ISPLINK to VREPLACE/VPUT the ISPF variable
*
         ICM   R15,B'1111',=V(ISPQRY)  ISPF SERVICES AVAILABLE?
         BZ    SETVAR60                NO, QUIT
         BALR  R14,R15              <- CALL ISPQRY
         LTR   R15,R15                 ISPF SERVICES AVAILABLE?
         BNZ   SETVAR60                NO, QUIT
* ISPEXEC CONTROL ERRORS RETURN
         LA    R1,=A(SETVAR54,SETVAR55+X'80000000')
         L     R15,=V(ISPEXEC)         EXEC INTERFACE
         BALR  R14,R15              <- CALL ISPEXEC
* ISPLINK VREPLACE RESULT LENGTH DATA
SETVAR40 LA    R14,=C'VREPLACE'        SERVICE
         L     R15,VARNAME+0           VARIABLE NAME
         LA    R0,VARVALUE+4           VALUE LENGTH
         L     R1,VARVALUE+0           ADDR OF VARIABLE VALUE
         STM   R14,R1,PARMLIST         STORE PARM LIST
         OI    PARMLIST+12,X'80'       MARK END OF LIST
         LA    R1,PARMLIST             PARM LIST ADDRESS
         L     R15,=V(ISPLINK)         ISPF SERVICES
         BALR  R14,R15              <- CALL ISPLINK
         LTR   R15,R15                 If VREPLACE fails, it's probably
         BNZ   SETVAR90                because of LANG(CREX).
* ISPEXEC VPUT RESULT SHARED
         LA    R1,=A(SETVAR56,SETVAR57+X'80000000')
         L     R15,=V(ISPEXEC)         EXEC INTERFACE
         BALR  R14,R15              <- CALL ISPEXEC
*
*        Invoke IKJCT441 to replace/create the &RESULT variable
*
SETVAR60 LA    R14,=A(TSVEUPDT)        CT441 FUNCTION
         LA    R15,VARNAME+0           POINTER TO VARIABLE NAME
         LA    R0,VARNAME+4            LENGTH OF VARIABLE NAME
         LA    R1,VARVALUE+0           POINTER TO VARIABLE VALUE
         LA    R2,VARVALUE+4           LENGTH OF VARIABLE VALUE
         SLR   R3,R3                   null token
         STM   R14,R3,PARMLIST         STORE PARAMETER LIST
         OI    PARMLIST+20,X'80'       MARK END OF LIST
         L     R15,TSVTVACC            A(IKJCT441)
         LA    R1,PARMLIST             PARM LIST ADDRESS
         SYNCH (R15)                <- CALL IKJCT441
SETVAR90 PR                            Restore registers, go back
***********************************************************************
*        Constants                                                    *
***********************************************************************
         CNOP  0,4
VARNAME  DC    A(SETVAR57+5,6)         ADDR/LEN OF VARIABLE NAME
SETVAR54 DC    A(L'SETVAR55)           LENGTH
SETVAR56 DC    A(L'SETVAR57)           LENGTH
SETVAR55 DC    C'CONTROL ERRORS RETURN'
SETVAR57 DC    C'VPUT RESULT SHARED'
***********************************************************************
*        Dynamic Storage                                              *
***********************************************************************
DYNAM    DSECT
         DS    18F                     standard save area
DWD      DS    D                       work area
VARVALUE DS    A,F                     addr/len (variable value)
PARMLIST DS    8A                      parm list
IRXFLAGS DS    X'40000000'             flags for IRXEXEC
DUMMY    DS    F                       Dummy parm for IRXEXEC
DYNECB   DS    F                       ECB FOR IKJPARS
DYNCPPL  DS    4F                      CPPL if invoked via CALL
DYNIOPL  DS    XL(IOPL_LENGTH)
DYNGTPB  DS    XL(GTPB_LENGTH)
PTR_INSTBLK DS A(DYNAM_INSTBLK_HEADER)
DYNAM_INSTBLK_HEADER DS XL(L'INSTBLK_HEADER)
PTR_EVALBLOCK DS A(DYNAM_EVALBLOCK)
DYNAM_EVALBLOCK DS XL(EVALBLOCK_LENGTH)
VECTORS  DS    4096A(0,0)              4096 addr/len pairs
DYNAML   EQU   *-DYNAM                 LENGTH OF WORK AREA
***********************************************************************
*        Control block definitions (DSECTs)                           *
***********************************************************************
         IKJCPPL
         IKJECT
         IKJIOPL                       I/O ROUTINES
IOPL_LENGTH EQU *-IOPL
         IKJGTPB                       GETLINE
GTPB_LENGTH EQU *-GTPB
         IRXINSTB                      IN-STORAGE BLOCK
         IRXEVALB                      EVALUATION BLOCK
DATA_LENGTH EQU 256                    256 bytes of data
         ORG   EVALBLOCK_EVDATA+DATA_LENGTH
EVALBLOCK_LENGTH EQU *-EVALBLOCK
         PRINT NOGEN
PRINT    OPSYN ANOP
         CVT   DSECT=YES,LIST=NO
         IKJTSVT
         YREGS
         END
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),BLKSIZE=3200
//*
//LKED    EXEC PGM=HEWL,PARM=(MAP,RENT)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=*.HLASM.SYSLIN,DISP=(OLD,PASS)
//SYSLIB   DD DSN=ISP.SISPLOAD(ISPLINK),DISP=SHR
//SYSLMOD  DD DSN=GILBERT.FILE183.LOAD(REXXTRY),DISP=SHR
//*
//GO      EXEC PGM=IKJEFT01
//SYSTSPRT DD SYSOUT=*
//SYSSNAP  DD SYSOUT=*
//SYSTSIN  DD *
TSOLIB ACT DS('GILBERT.FILE183.LOAD')
CALL *(REXXTRY) 'SAY XXX; SAY YYY'
EXEC 'GILBERT.FILE183.PDS(EXECUTE)'
CONTROL LIST ASIS
SET string = ABC DEF GHI JKL
 /* format #1: REXXTRY receives a long REXX line as an argument */
REXXTRY TRACE 'R'; +
        parm='&string'; +
        n=WORDS(parm); +
        RETURN WORD(parm,n)
WRITE LASTCC=&LASTCC RESULT=&RESULT
 /* format #2: REXXTRY reads REXX code from the rest of the CLIST */
REXXTRY           /* add your comment here
  DATA
    TRACE 'R'
    parm='&string'
    n=WORDS(parm)
    SAY WORD(parm,n)
    RETURN 1
    /*
    EXIT 003
    */
  ENDDATA
WRITE this stmt executes after the last REXXTRY
WRITE RESULT=&RESULT
/*
//GO2     EXEC PGM=IKJEFT01
//SYSTSPRT DD SYSOUT=*
//SYSSNAP  DD SYSOUT=*
//SYSTSIN  DD *
TSOLIB ACT DS('GILBERT.FILE183.LOAD')
CALL *(REXXTRY)
SAY XXX
SAY YYY
//
//
//*
//GO1     EXEC PGM=IKJEFT01
//SYSUT2   DD DSN=&&TEMPPDS(REXXEXEC),UNIT=VIO,SPACE=(TRK,(1,,1))
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DUMMY
//SYSEXEC  DD DSN=&&TEMPPDS,VOL=REF=*.SYSUT2,DISP=(OLD,DELETE)
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD *
CALL *(IEBGENER)
%REXXEXEC
//*
//SYSUT1   DD *
SAY 'Hello!'
//*
//GO2     EXEC PGM=IKJEFT01,PARM='%EXECUTE EXEC'
//SYSPROC  DD DSN=GILBERT.FILE183.PDS,DISP=SHR
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD *
SAY 'Hello!'
//*
//GO3     EXEC PGM=IKJEFT01,PARM=REXXTRY
//STEPLIB  DD DSN=GILBERT.FILE183.LOAD,DISP=SHR
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD *
SAY 'Hello!'
