//GILBERTS JOB (ACCT#),SHOWJPAQ,
//*RESTART=GO,
// NOTIFY=&SYSUID,
// CLASS=A,MSGCLASS=H,COND=(0,NE),REGION=6M
//HLASM EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)
*PROCESS NOBATCH,USING(WARN(8))
***********************************************************************
*                                                                     *
* MODULE NAME = SHOWJPAQ                                              *
*                                                                     *
* DESCRIPTIVE NAME = Display contents of the JPAQ in TSO environment  *
*                                                                     *
* STATUS = R202                                                       *
*                                                                     *
* FUNCTION = This assembler command can be invoked under TSO or ISPF  *
*            to display the contents of the Job Pack Area (JPAQ).     *
*                                                                     *
* AUTHOR = Gilbert Saint-Flour <carlos@gsf-soft.com>                  *
*          http://gsf-soft.com/Freeware/                              *
*                                                                     *
* ENVIRONMENT = SEE BELOW                                             *
*                                                                     *
*    DEPENDENCIES: OS/390 or z/OS                                     *
*                                                                     *
* MODULE TYPE = PROCEDURE, (CSECT TYPE)                               *
*                                                                     *
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      *
*                IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 2K                                                 *
*                                                                     *
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31,                   *
*                 PROBLEM STATE, KEY 8                                *
*                 APF AUTHORIZATION: NONE                             *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
* 100 Initial version called MAPJPAQ                             1988 *
* 200 New version, based on the JPAQ section of SHOWMVS          2004 *
* 201 PDATA=X'08020000,007D2D00,008D1768,00000000'               2009 *
*     Move left                                                       *
* 202 CDATTR3                                                         *
*                                                                     *
&REL     SETC  'R202'                                                 *
***********************************************************************
SHOWJPAQ CSECT
SHOWJPAQ AMODE 31
         B     BEGIN-*(,R15)
&D       SETC  '&SYSDATE'(7,2)'-'.'&SYSDATE'(1,2)'-'.'&SYSDATE'(4,2)
         DC    C'GSF Utilities - SHOWJPAQ &REL - 20&D &SYSTIME',0H'0'
BEGIN    BAKR  R14,0
         LR    R12,R15
         USING SHOWJPAQ,R12
         GETMAIN R,LV=DYNAML
         LR    R11,R1
         USING DYNAM,R11
         L     R7,X'021C'(,0)          PSATOLD   A(TCB)
         USING TCB,R7
*---------------------------------------------------------------------*
*                                                                     *
*   NAME     ENTPT    ATTRB SP ATTR  ATTR2  USE    MAJ-CDE   LENGTH   *
*                                                                     *
*   SHOWJPAQ 840BAA30   30  FC  31    22    0001             0007E0   *
*   JPAQ     840BAA30   30      35    02           SHOWJPAQ           *
*                                                                     *
*---------------------------------------------------------------------*
         STRING       'Name     EntPt   Attrb Sp Attr Attr2 Attr3 Use  X
               Maj-CDE  Length Load-pnt Data-Set Name',INTO=LINE
         BAL   R10,PUTLINE          <- Print line
         BAL   R10,PUTBLANK         <- Print blank line
*
         SLR   R5,R5                   first-time switch
*LOOP
JPAQ11   BAL   R14,NEXTCDE          <- get next CDE
         LTR   R5,R5                   end of JPAQ?
         BZ    JPAQ91                  yes, exit
         USING CDENTRY,R5
*
         CSVQUERY SEARCH=JPALPA,       SEARCH JPAQ                     +
               INADDR=CDENTPT,         ADDRESS                         +
               OUTEPNM=EPNM,           RETURN EP NAME                  +
               OUTPID=PID,             PROVIDER ID                     +
               OUTPDATA=PDATA,         PROVIDER DATA                   +
               OUTEPTKN=MODTOKEN,      RETURN TOKEN                    +
               MF=(E,CSVQRYWK)         WORK AREA
         LTR   R2,R15                  pass return code
         BZ    JPAQ17                  OK, continue
         STRING 'CSVQUERY Failed, R15=',((R2),,L),INTO=CSVDWORK
         LA    R1,CSVDWORK             message
         B     JPAQ82
*
JPAQ17   CLC   =C'PGMF',PID            LOADED FROM JOBLIB/STEPLIB?
         BNE   JPAQ31                  no, jump
         OC    PDATA,PDATA             Any provider data returned?
         BZ    JPAQ41                  no, quit
         LA    R2,X'000000FF'          mask for NR
         N     R2,PDATA_TTRN           load TTRN from Provider Data
         CLI   PDATA+1,X'01'           LOADED FROM -LNKLST- ?
         BE    JPAQ34                  yes, jump
         CLI   PDATA+1,X'02'           LOADED FROM TASKLIB ?
         BE    JPAQ50                  yes, jump
*
*        Loaded from JOBLIB/STEPLIB/TASKLIB
*
JPAQ21   TM    PDATA,X'80'             loaded from a PDSE?
         BZ    JPAQ21L                 no, jump
         L     R3,PDATA_DDN+4          yes, get LFMD address
         MVC   PDATA_DDN,044(R3)       move true ddname
JPAQ21L  L     R3,TCBTIO               TIOT
         USING TIOT1,R3
         LA    R3,TIOENTRY             First TIOT Entry
         USING TIOENTRY,R3
         SLR   R0,R0                   PREPARE IC
*LOOP
JPAQ22   CLC   PDATA_DDN,TIOEDDNM      is this my ddname ?
         BE    JPAQ60                  yes, exit loop
         IC    R0,TIOELNGH             LOAD LENGTH OF CURRENT ENTRY
         ALR   R3,R0                   BUMP UP TO NEXT ENTRY
         CLI   TIOELNGH,0              IS THIS THE END?
         BNZ   JPAQ22                  NOT YET, LOOP THROUGH TIOT
*ENDLOOP
*        DDname has been freed (not found in TIOT)
*
         STRING (PDATA_DDN,,T),'+',((R2),,L),INTO=CSVDWORK
         LA    R1,CSVDWORK             message
         B     JPAQ80                  exit
*
*        Get module's TTRN in linklist (PID=LLAF)
*
JPAQ31   CLC   =C'LLAF',PID            LOADED FROM LINK-LIST?
         BNE   JPAQ41                  NO, EXIT
         MVC   CSVDWORK,=AL2(1,L'CSVDWORK)
         MVC   PDS2NAME,EPNM           EPNAME
         L     R1,CVTPTR               CVT address
         L     R1,CVTLINK-CVTMAP(,R1)  link-list DCB
         BLDL  (1),CSVDWORK            ISSUE BLDL (to LLA)
         LTR   R15,R15
         BNZ   JPAQ45                  NOT FOUND, QUIT
         IC    R2,PDS2CNCT             pick-up concat#
         MVC   PDATA_DDN,DDNAME        move ddname
*
*        Find link-list dsname from LLT
*
JPAQ34   MH    R2,=Y(LLTNEXT-LLTENTRY) make it an offset into the LLT
         L     R14,X'0224'(,0)         PSAAOLD   A(ASCB)
         L     R14,ASCBASSB-ASCB(,R14) ASSB
         L     R14,ASSBDLCB-ASSB(,R14) CSVDLCB
         L     R3,DLCBLLT@-DLCB(,R14)  LLT
         LA    R1,LLTDSN-LLT(R2,R3)    change offset to address
         B     JPAQ80                  exit
*
*        PDATA=zero or PID not equal to PGMF or LLAF
*
JPAQ41   STRING 'PID(',(PID,,T),')',INTO=WORK44
         LA    R1,WORK44               message
         LA    R15,4                   RC=4
         B     JPAQ82
*
*        BLDL_RC>0
*
JPAQ45   STRING 1X,INTO=WORK44         dsname not found
         B     JPAQ82
*
*        PDATA=X'08020000,007D2D00,008D1768,00000000'
*        PDATA may be related to DESERV/IGWSMDE ???
*        It seems that PDATA+0=X'08' ???
*                      PDATA+1=PDS2LIBF (the "Z byte").
*                      PDATA+4=TTRN
*                      PDATA+8=A(TCB)
*
JPAQ50   LA    R1,TCB                  R1=A(TCB) - my own TCB
         TM    PDATA+0,X'08'           X'08' ??
         BNO   JPAQ51                  no, jump
         L     R14,PDATA+8             R14=A(TCB)
         CLC   TCBTIO,TCBTIO-TCB(R14)  is this a TCB ?
         BNE   JPAQ51                  no, jump
         LR    R1,R14                  R1=A(TCB)
JPAQ51   L     R1,TCBJLB-TCB(,R1)      R1=A(DCB) STEPLIB/JOBLIB/TASKLIB
         LH    R3,040(,R1)             DCBTIOT
         AL    R3,TCBTIO               ADD A(TIOT)
         MVC   PDATA_DDN,TIOEDDNM      copy JOBLIB/STEPLIB ddname
*
*        DDname found - Retrieve dsname from JFCB
*
JPAQ60   LTR   R2,R2                   first data set in concat?
         BZ    JPAQ66                  yes, exit
         SLR   R0,R0
*loop
JPAQ61   IC    R0,TIOELNGH             LOAD LENGTH OF CURRENT ENTRY
         ALR   R3,R0                   BUMP UP TO NEXT ENTRY
         BCT   R2,JPAQ61               next concat#
*endloop
JPAQ66   LA    R2,CSVDWORK+4           WORK AREA
         ST    R2,CSVDWORK             WORK AREA
         USING ZB505,R2
         XC    SWAEPAX,SWAEPAX         CLEAR WORK AREA
         MVC   SWVA,TIOEJFCB           SVA OF THE JFCB
         SWAREQ FCODE=RL,EPA=CSVDWORK,MF=(E,SWAREQL1),UNAUTH=YES
         L     R1,SWBLKPTR             31-BIT ADDRESS OF JFCB
*
JPAQ80   SLR   R15,R15                 RC=0
*
JPAQ82   L     R6,CDXLMJP              POINT TO XL (OR MAJOR CDE)
         TM    CDATTR,CDMIN            CHECK ATTRIBUTES
         BO    JPAQ85                  JUMP IF THIS IS A MINOR CDE
         USING XTLST,R6
         STRING CDNAME,1X,(CDENTPT,,X),2X,(CDATTRB,,X),2X,(CDSP,,X),2X,X
               (CDATTR,,X),4X,(CDATTR2,,X),4X,(CDATTR3,,X),2X,         X
               (CDUSE,,X),10X,(XTLMSBLN,,X),1X,(XTLMSBAD,,X),          X
               1X,((R1),44,T),         DSname from CDEX                X
               INTO=LINE
         BAL   R10,PUTLINE          <- Print line
         B     JPAQ11
JPAQ85   STRING CDNAME,1X,(CDENTPT,,X),2X,(CDATTRB,,X),6X,             X
               (CDATTR,,X),4X,(CDATTR2,,X),4X,(CDATTR3,,X),            X
               7X,(CDNAME-CDENTRY(R6),8),                              X
               17X,((R1),44,T),        DSname from CDEX                X
               INTO=LINE
         BAL   R10,PUTLINE          <- Print line
         B     JPAQ11                  next JPAQ entry
*ENDLOOP
*
* ATTRB: 80-EOM 40-IDENTY 20-DIRTY 10-CDEX 08-LPDE 04-GLOBAL 02-CONTA..
*  ATTR: 80-NIP/MLPA 40-NIC 20-RENT 10-REUS 08-NREUS 04-MINOR 02-JPAQ
* ATTR2: 80-SP0 40-REL 20-XLE 10-RLC 08-AMODE_ANY 04-OVLY 02-APFLIB ...
*
JPAQ91   BAL   R10,PUTBLANK         <- Print blank line
         STRING 'ATTRB: 80-EOM 40-IDENTY 20-DIRTY 10-CDEX ',           X
               '08-LPDE 04-GLOBAL 02-CONTAMINATION 01-RACF',           X
               INTO=LINE
         BAL   R10,PUTLINE          <- NEXT LINE
         STRING ' ATTR: 80-NIP/MLPA 40-NIC 20-RENT 10-REUS ',          X
               '08-NREUS 04-MINOR 02-JPAQ 01-NOT_OL',                  X
               INTO=LINE
         BAL   R10,PUTLINE          <- NEXT LINE
         STRING 'ATTR2: 80-SP0 40-REL 20-XLE 10-RLC ',                 X
               '08-AMODE_ANY 04-OVLY 02-APFLIB 01-AC=1',               X
               INTO=LINE
         BAL   R10,PUTLINE          <- NEXT LINE
         STRING 'Attr3: 80-OpMvsPath 40-PML',                          X
               INTO=LINE
         BAL   R10,PUTLINE          <- NEXT LINE
         BAL   R10,PUTBLANK         <- Print blank line
         FREEMAIN R,LV=DYNAML,A=(R11)
*
         SLR   R15,R15                 RC=0
         PR
*
*---------------------------------------------------------------------*
*        Scan JPAQ backwards (from oldest CDE)                        *
*              Input:  R5 points to current CDENTRY                   *
*              Output: R5 point to next CDE                           *
*---------------------------------------------------------------------*
*
NEXTCDE  LR    R0,R5                   point to current CDE
         L     R5,TCBJSTCB             job-step TCB
         L     R5,TCBJPQ-TCB(,R5)      Top CDE (most recent)
         LTR   R5,R5                   empty JPAQ?
         BZR   R14                     yes, goback with R5=0
         USING CDENTRY,R5
*--LOOP
NEXTCDE2 CL    R0,CDCHAIN              is this the next RB?
         BER   R14                     yes, goback
         ICM   R5,B'1111',CDCHAIN      previous CDE
         BNZ   NEXTCDE2                not found yet, loop more
*--ENDLOOP
         BR    R14                     goback with R5=0
*---------------------------------------------------------------------*
*        Display message using PUTLINE                                *
*        ECT=LWAPECT,UPT=PSCBUPT in case we're CALLed as a program    *
*---------------------------------------------------------------------*
PUTBLANK MVI   LINE,C' '               blank line
         LA    R15,1                   length=1
PUTLINE  LA    R0,4(,R15)              length
         SLL   R0,16                   ll,00
         STCM  R0,B'1111',LINEHDR      store RDW
         L     R1,X'0224'(,0)          PSAAOLD   A(ASCB)
         L     R1,ASCBASXB-ASCB(,R1)   A(ASXB)
         L     R1,X'0014'(,R1)         ASXBLWA   A(LWA)
         L     R0,X'0020'(,R1)         LWAPECT   A(ECT)
         L     R14,X'0018'(,R1)        LWAPSCB   A(PSCB)
         L     R14,X'0034'(,R14)       PSCBUPT   A(UPT)
         L     R15,CVTPTR(,0)          CVT ADDRESS
         L     R15,CVTPUTL-CVTMAP(,R15) A(IKJPUTL)
         PUTLINE PARM=PUTBLK,UPT=(R14),ECT=(R0),ECB=ECB1,              X
               ENTRY=(15),             A(IKJPUTL)                      X
               OUTPUT=(LINEHDR,TERM,SINGLE,DATA),MF=(E,TENWORDS)
         BR    R10
*---------------------------------------------------------------------*
*        Dynamic Storage                                              *
*---------------------------------------------------------------------*
DYNAM    DSECT
TENWORDS DS    10F
ECB1     DS    F
PUTBLK   PUTLINE MF=L
SWAREQL1 SWAREQ MF=L
         CSVQUERY MF=(L,CSVQRYWK),PLISTVER=MAX
*
BLDLWORK DS    0F,AL2(1,L'CSVDWORK)    prefix for BLDL
         IHAPDS DSECT=NO,PDSBLDL=YES   PDS Directory
CSVDWORK EQU   BLDLWORK,*-BLDLWORK     Work area for CSVDSN routine
*
LRETCODE DS    F                       Return code
LRSNCODE DS    F                       Reason code
PDATA    DS    XL16
PDATA_DDN EQU PDATA+8,8,C'C'           DDNAME
PDATA_TTRN EQU PDATA+4,4,C'X'          TTRN
PID      DS    XL4
MODTOKEN DS    XL8
PDATA_DSN DS   CL44
*
LINEHDR  DS    Y(L'LINE+4,0)           PUTLINE
LINE     DS    CL121
*
WORK44   DS    CL44
DDNAME   DS    CL8'-LNKLST-'
EPNM     DS    CL8'SHOWJPAQ'
EYECATCH DS    CL120
DYNAML   EQU   *-DYNAM
*---------------------------------------------------------------------*
*        MVS control blocks used in this program                      *
*---------------------------------------------------------------------*
         CVT   PREFIX=YES,DSECT=YES,LIST=NO
         IKJTCB DSECT=YES,LIST=NO      Task Control Block
         IHACDE                        Contents Directory Entry
         IEFTIOT1                      Task Input-Output Table
         IEFZB505 LOCEPAX=YES          EPA mapping for SWAREQ
         IEFJESCT                      JES Vector Table
         IHAXTLST                      Extent List
         IHAASCB DSECT=YES             Address Space Control Block
         IHAASSB LIST=NO               Address Space Secondary Block
         CSVDLCB TITLE=NO              Dynamic Link-List
*        IHALLT DSECT=YES              LNKLST/LPALST tables
LLT      DSECT
LLTLLT   DS    C'LLT '                 BLOCK ACRONYM
LLTNO    DS    F                       NUMBER OF ENTRIES
LLTENTRY DS    0CL45                   DSNAME ENTRY
LLTDSNL  DS    FL1                     DSNAME LENGTH AFTER TRUNCATION
LLTDSN   DS    CL44                    DATA SET NAME
LLTNEXT  EQU   *                       NEXT ENTRY
*
         STRING (GENERATE,,LOCTR)
         YREGS                         R0-R15
         END
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=SYS1.MODGEN,DISP=SHR
//         DD DSN=GILBERT.FILE183.PDS,DISP=SHR               STRING
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,5)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,2),DISP=(,PASS),BLKSIZE=3200
//*
//LKED    EXEC PGM=LINKEDIT,PARM='LIST,MAP,RENT,REFR'
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=*.HLASM.SYSLIN,DISP=(OLD,PASS)
//SYSLMOD  DD DSN=GILBERT.FILE183.LOAD(SHOWJPAQ),DISP=SHR,
// SPACE=(CYL,(0,1))
//*
//GO      EXEC PGM=IKJEFT01,TIME=(,1)
//STEPLIB  DD DSN=GILBERT.FILE183.LOAD,DISP=SHR
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD *
SHOWJPAQ
CALL *(SHOWJPAQ)
