/*************************************************************** REXX */
/*                                                                    */
/* MODULE NAME = EXECUTE                                              */
/*                                                                    */
/* DESCRIPTIVE NAME = Execute an in-stream CLIST or REXX EXEC         */
/*                                                                    */
/* STATUS = R205                                                      */
/*                                                                    */
/* FUNCTION = EXECUTE is a REXX EXEC which allows you to execute an   */
/*            in-stream CLIST or a REXX EXEC in a TSO batch TMP step. */
/*            Using EXECUTE, you can work around a limitation of      */
/*            standard TSO/E which can only execute a CLIST or a REXX */
/*            EXEC stored in a PDS member or a sequential data set.   */
/*                                                                    */
/*            EXECUTE can also be invoked as an EDIT macro to         */
/*            execute the current data set as a CLIST or REXX exec.   */
/*            The user can select a line or range of lines to         */
/*            execute by specifying the C, Cn or CC/CC line commands. */
/*                                                                    */
/* AUTHOR   =  Gilbert Saint-Flour <carlos@gsf-soft.com>              */
/*             http://gsf-soft.com/Freeware/                          */
/*                                                                    */
/* DEPENDENCIES = TSO/E V2                                            */
/*                                                                    */
/* SYNTAX = see below                                                 */
/*                                                                    */
/*          EXECUTE CLIST|EXEC                                        */
/*                  TRACE|NOTRACE                                     */
/*                  ISPF|ISPSTART                                    */
/*                                                                    */
/*     Default:     CLIST,NOTRACE                                     */
/*                                                                    */
/*     Sample JCL with PARM and a CLIST :                             */
/*                                                                    */
/*        //CLIST EXEC PGM=IKJEFT01,PARM='%EXECUTE'                   */
/*        //SYSPROC DD DSN=<Library which contains EXECUTE>,DISP=SHR  */
/*        //SYSTSPRT DD SYSOUT=*                                      */
/*        //SYSTSIN DD *                                              */
/*        WRITE In-line CLIST executed by &SYSUID                     */
/*        /*                                                       */ */
/*                                                                    */
/*     Sample JCL with in-line EXECUTE REXX command :                 */
/*                                                                    */
/*        //EXEC EXEC PGM=IKJEFT01                                    */
/*        //SYSEXEC DD DSN=<Library which contains EXECUTE>,DISP=SHR  */
/*        //SYSTSPRT DD SYSOUT=*                                      */
/*        //SYSTSIN DD *                                              */
/*        %EXECUTE EXEC                                               */
/*        SAY "In-line EXEC executed by" USERID()                     */
/*        /*                                                       */ */
/*                                                                    */
/*     Sample JCL with PARM and ISPF option :                         */
/*                                                                    */
/*        //ISPF EXEC PGM=IKJEFT01,PARM='%EXECUTE EXEC ISPF'          */
/*        //SYSEXEC DD DSN=<your EXEC library>,DISP=SHR               */
/*        //SYSTSPRT DD SYSOUT=*                                      */
/*        //SYSTSIN DD *                                              */
/*        SAY "In-line EXEC executed by" USERID() in ISPF             */
/*        SAY "That's it, it's done !"                                */
/*        /*                                                       */ */
/*        //ISPMLIB DD DSN=ISP.SISPMENU,DISP=SHR                      */
/*        //ISPTLIB DD DSN=ISP.SISPTENU,DISP=SHR                      */
/*        //ISPPROF DD UNIT=VIO,SPACE=(TRK,(1,1,1)),RECFM=FB,LRECL=80 */
/*        //ISPPLIB DD DSN=*.ISPPROF,DISP=OLD,VOL=REF=*.ISPPROF       */
/*        //ISPSLIB DD DSN=*.ISPPROF,DISP=OLD,VOL=REF=*.ISPPROF       */
/*        //ISPLOG  DD SYSOUT=*,RECFM=FB,LRECL=121,DSN=&&ISPLOG       */
/*                                                                    */
/*      BATCH mode - execute an in-line CLIST which uses REXXTRY      */
/*                   to execute an in-line REXX exec                  */
/*                                                                    */
/*        //CLISTRX EXEC PGM=IKJEFT01                                 */
/*        //STEPLIB  DD DSN=CBTTAPE.FILE183.LOAD,DISP=SHR   REXXTRY   */
/*        //SYSPROC  DD DSN=CBTTAPE.FILE183.PDS,DISP=SHR    EXECUTE   */
/*        //SYSTSPRT DD SYSOUT=*                                      */
/*        //SYSTSIN  DD *                                             */
/*        %EXECUTE CLIST                                              */
/*          /* The CLIST starts here */                               */
/*        CONTROL LIST CONLIST                             /*CLIST*/  */
/*        WRITE Start of the CLIST                         /*CLIST*/  */
/*        REXXTRY A=1;                                     /*REXX*/ + */
/*                B=2;                                     /*REXX*/ + */
/*                UID=USERID();                            /*REXX*/ + */
/*                RETURN(A+B UID)                          /*REXX*/   */
/*        WRITE LASTCC=&LASTCC RESULT='&RESULT'            /*CLIST*/  */
/*        EXIT CODE(&LASTCC)                               /*CLIST*/  */
/*                                                                    */
/* OPERATION = see below                                              */
/*                                                                    */
/*        EXECUTE can be executed from SYSPROC or SYSEXEC.            */
/*                                                                    */
/*        EXECUTE creates a temporary data set, copies the in-stream  */
/*        commands into it, then issues the TSO EXEC command.         */
/*        EXECUTE processes the in-line commands as a CLIST except    */
/*        when (1) it is invoked with the EXEC key-word or (2) the    */
/*        REXX word appears in a comment on the first line.           */
/*                                                                    */
/* CHANGES = see below                                                */
/*                                                                    */
/* 200 New packaging for the CBT tape                                 */
/* 201 Can be invoked as an EDIT macro                                */
/* 202 Add TRACE option                                               */
/* 203 Add ISPF option                                                */
/* 204 Change PULL to PARSE PULL to prevent conversion to uppercase   */
/* 205 Remove "ADDRESS ISPEXEC"                                       */
/*                                                                    */
/**********************************************************************/
ARG parms                               /* CLIST, EXEC or TRACE     */
IF SYSVAR('SYSISPF')='ACTIVE' THEN DO
  "ISPEXEC CONTROL ERRORS RETURN"
  "ISREDIT MACRO (parms) NOPROCESS"
  macro_rc=rc                         /* save rc from ISREDIT macro */
  END
  /*                                                                */
  /*        Process Parameters                                      */
  /*                                                                */
trace=''
type=''
ispf=''
IF WORDS(parms) > 0 THEN DO i=1 to WORDS(parms)
    p=TRANSLATE(WORD(parms,i))
    SELECT
      WHEN ABBREV('CLIST',p,1) THEN
        type='CLIST'
      WHEN ABBREV('EXEC',p,1) THEN
        type='EXEC'
      WHEN ABBREV('TRACE',p,1) THEN
        trace='TRACE'
      WHEN ABBREV('NOTRACE',p,1) THEN
        trace=''
      WHEN ABBREV('ISPF',p,1) THEN
        ispf='ISPF'
      WHEN ABBREV('ISPSTART',p,1) THEN
        ispf='ISPF'
      OTHERWISE DO
        SAY 'Invalid Parameters, should be CLIST, EXEC or TRACE.'
        EXIT 20
        END
    END
  END
IF type='CLIST' and trace='TRACE' THEN DO
  SAY 'CLIST is not compatible with TRACE.'
  EXIT 20
  END
  /*                                                                */
  /*        Allocate &SYSUID..INSTREAM.TEMP                         */
  /*                                                                */
ADDRESS "TSO"
tempdsn="'"USERID()".INSTREAM.TEMP'"
IF LISTDSI('TEMPEXEC' 'FILE')=16 THEN
  "ALLOCATE DD(TEMPEXEC) DS("tempdsn") NEW DELETE",
         "UNIT(SYSALLDA) SPACE(1 1) TRACKS",
         "DSORG(PS) RECFM(V B) LRECL(255)"

IF macro_rc=0 THEN
  CALL EDIT_MACRO                       /* read EDIT data */
ELSE
  CALL READ_SYSTSIN                     /* read from //SYSTSIN */
  /*                                                                */
  /*        Copy control statements to INSTREAM.TEMP                */
  /*                                                                */
"EXECIO * DISKW TEMPEXEC (STEM stmt. OPEN FINIS)"
  /*                                                                */
  /*        Execute &SYSUID..INSTREAM.TEMP                          */
  /*                                                                */
IF ispf='ISPF' THEN
  PUSH "ISPSTART CMD(EXEC" tempdsn type
ELSE
  PUSH "EXEC" tempdsn type             /* add EXEC cmd to TSO stack */
IF trace='TRACE' THEN                  /* TRACE parameter specified */
  PUSH "EXECUTIL TS"
EXIT rc

/**********************************************************************/
/*                                                                    */
/*                      Read EDIT data set                            */
/*                                                                    */
/**********************************************************************/
EDIT_MACRO:

  /*----------------------------------------------------------------*/
  /*  If the user selected a range by entering a line command such  */
  /*  as C, Cnn or C/CC, set line1 and line2 to the first and last  */
  /*  line numbers, respectively.  Otherwise, set line1 to 1 and    */
  /*  line2 to the last line of the data set.                       */
  /*----------------------------------------------------------------*/

  'ISREDIT PROCESS RANGE C'
  SELECT
    WHEN rc=0 THEN DO
      "ISREDIT (line1) = LINENUM .ZFRANGE"         /* First line  */
      "ISREDIT (line2) = LINENUM .ZLRANGE"         /* Last line   */
      END
    WHEN rc=4 THEN DO
      line1=1                                    /*   DEFAULTS  */
      "ISREDIT (line2) = LINENUM .ZLAST"         /*   DEFAULTS  */
      END
    WHEN rc=20 THEN                       /* All lines deleted        */
      SIGNAL Empty_dataset                /* No lines to ROUTE        */
    OTHERWISE DO                          /* Line command conflict    */
      Pgmrc=rc                            /* Save ISREDIT Return code */
      IF zerrmsg\='' THEN
        'SETMSG MSG('zerrmsg')'           /* Edit has created message */
      EXIT Pgmrc
      END
  END
  i=0
  DO line1=line1 to line2
    "ISREDIT (line) = LINE" line1
    i=i+1
    stmt.i=line
  END
  RETURN

Empty_dataset:
  zedsmsg='Empty data set'
  zedlmsg='There are no lines to execute'
  'ISPEXEC SETMSG MSG(ISRZ001)'
  EXIT 12

  /******************************************************************/
  /*  Read control statements from SYSTSIN into a stemmed variable  */
  /*  Assume EOF after ten consecutive null strings are returned.   */
  /******************************************************************/
READ_SYSTSIN:
  n=0
  DO i = 1 by 1 until n=10
    PARSE PULL stmt.i                   /* read a line from SYSTSIN */
    IF stmt.i='' THEN DO                /* blank line or EOF        */
      n=n+1                             /* count blank lines        */
      stmt.i=' '                        /* one blank                */
      END
    ELSE                                /* non-blank line           */
      n=0                               /* reset blank lines ctr    */
  END
  RETURN
